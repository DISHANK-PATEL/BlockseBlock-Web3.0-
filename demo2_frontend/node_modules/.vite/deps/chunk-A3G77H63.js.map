{
  "version": 3,
  "sources": ["../../../../../node_modules/@dfinity/identity/src/identity/ed25519.ts", "../../../../../node_modules/@dfinity/identity/src/identity/ecdsa.ts", "../../../../../node_modules/@dfinity/identity/src/identity/partial.ts", "../../../../../node_modules/@dfinity/identity/src/identity/delegation.ts", "../../../../../node_modules/@dfinity/identity/src/identity/webauthn.ts", "../../../../../node_modules/@slide-computer/signer/src/utils.ts", "../../../../../node_modules/@slide-computer/signer/src/signer.ts", "../../../../../node_modules/@slide-computer/signer/src/errors.ts", "../../../../../node_modules/@slide-computer/signer/src/icrc34/delegation.ts", "../../../../../node_modules/@slide-computer/signer/src/transport.ts", "../../../../../node_modules/@slide-computer/signer-agent/src/agent.ts", "../../../../../node_modules/@slide-computer/signer-agent/src/utils.ts", "../../../../../node_modules/bignumber.js/bignumber.mjs", "../../../../../node_modules/@slide-computer/signer-agent/src/queue.ts", "../../../../../node_modules/idb-keyval/dist/index.js", "../../../../../node_modules/@slide-computer/signer-storage/src/storage.ts", "../../../../../node_modules/@slide-computer/signer-storage/src/identity.ts", "../../../../../node_modules/@slide-computer/signer-storage/src/delegation.ts", "../../../../../node_modules/@dfinity/utils/src/enums/token.enums.ts", "../../../../../node_modules/@dfinity/utils/src/constants/constants.ts", "../../../../../node_modules/@dfinity/utils/src/parser/token.ts", "../../../../../node_modules/@dfinity/utils/src/services/canister.ts", "../../../../../node_modules/@dfinity/utils/src/utils/actor.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/agent.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/nullish.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/asserts.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/arrays.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/base32.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/base64.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/crc.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/date.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/debounce.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/did.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/json.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/principal.utils.ts", "../../../../../node_modules/@dfinity/utils/src/utils/version.utils.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/account_identifier.ts", "../../../../../node_modules/node_modules/@noble/hashes/src/_assert.ts", "../../../../../node_modules/node_modules/@noble/hashes/src/utils.ts", "../../../../../node_modules/node_modules/@noble/hashes/src/_md.ts", "../../../../../node_modules/node_modules/@noble/hashes/src/sha256.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/constants/canister_ids.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/utils/params.utils.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/ledger.canister.ts", "../../../../../node_modules/@dfinity/ledger-icp/candid/ledger.certified.idl.js", "../../../../../node_modules/@dfinity/ledger-icp/candid/ledger.idl.js", "../../../../../node_modules/@dfinity/ledger-icp/src/canisters/ledger/ledger.request.converts.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/constants/constants.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/errors/ledger.errors.ts", "../../../../../node_modules/node_modules/base64-js/index.js", "../../../../../node_modules/node_modules/ieee754/index.js", "../../../../../node_modules/node_modules/buffer/index.js", "../../../../../node_modules/@dfinity/ledger-icp/src/utils/account_identifier.utils.ts", "../../../../../node_modules/@dfinity/ledger-icp/src/utils/accounts.utils.ts"],
  "sourcesContent": ["import { bufEquals } from '@dfinity/agent';\nimport {\n  DerEncodedPublicKey,\n  KeyPair,\n  PublicKey,\n  Signature,\n  SignIdentity,\n  uint8ToBuf,\n  ED25519_OID,\n  unwrapDER,\n  wrapDER,\n  fromHex,\n  toHex,\n  bufFromBufLike,\n} from '@dfinity/agent';\nimport { ed25519 } from '@noble/curves/ed25519';\n\ndeclare type KeyLike = PublicKey | DerEncodedPublicKey | ArrayBuffer | ArrayBufferView;\n\nfunction isObject(value: unknown) {\n  return value !== null && typeof value === 'object';\n}\n\nexport class Ed25519PublicKey implements PublicKey {\n  /**\n   * Construct Ed25519PublicKey from an existing PublicKey\n   * @param {unknown} maybeKey - existing PublicKey, ArrayBuffer, DerEncodedPublicKey, or hex string\n   * @returns {Ed25519PublicKey} Instance of Ed25519PublicKey\n   */\n  public static from(maybeKey: unknown): Ed25519PublicKey {\n    if (typeof maybeKey === 'string') {\n      const key = fromHex(maybeKey);\n      return this.fromRaw(key);\n    } else if (isObject(maybeKey)) {\n      const key = maybeKey as KeyLike;\n      if (isObject(key) && Object.hasOwnProperty.call(key, '__derEncodedPublicKey__')) {\n        return this.fromDer(key as DerEncodedPublicKey);\n      } else if (ArrayBuffer.isView(key)) {\n        const view = key as ArrayBufferView;\n        return this.fromRaw(bufFromBufLike(view.buffer));\n      } else if (key instanceof ArrayBuffer) {\n        return this.fromRaw(key);\n      } else if ('rawKey' in key) {\n        return this.fromRaw(key.rawKey as ArrayBuffer);\n      } else if ('derKey' in key) {\n        return this.fromDer(key.derKey as DerEncodedPublicKey);\n      } else if ('toDer' in key) {\n        return this.fromDer(key.toDer() as ArrayBuffer);\n      }\n    }\n    throw new Error('Cannot construct Ed25519PublicKey from the provided key.');\n  }\n\n  public static fromRaw(rawKey: ArrayBuffer): Ed25519PublicKey {\n    return new Ed25519PublicKey(rawKey);\n  }\n\n  public static fromDer(derKey: DerEncodedPublicKey): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.derDecode(derKey));\n  }\n\n  // The length of Ed25519 public keys is always 32 bytes.\n  private static RAW_KEY_LENGTH = 32;\n\n  private static derEncode(publicKey: ArrayBuffer): DerEncodedPublicKey {\n    const key = wrapDER(publicKey, ED25519_OID).buffer as DerEncodedPublicKey;\n    key.__derEncodedPublicKey__ = undefined;\n    return key;\n  }\n\n  private static derDecode(key: DerEncodedPublicKey): ArrayBuffer {\n    const unwrapped = unwrapDER(key, ED25519_OID);\n    if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n      throw new Error('An Ed25519 public key must be exactly 32bytes long');\n    }\n    return unwrapped;\n  }\n\n  #rawKey: ArrayBuffer;\n\n  public get rawKey(): ArrayBuffer {\n    return this.#rawKey;\n  }\n\n  #derKey: DerEncodedPublicKey;\n\n  public get derKey(): DerEncodedPublicKey {\n    return this.#derKey;\n  }\n\n  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n  private constructor(key: ArrayBuffer) {\n    if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n      throw new Error('An Ed25519 public key must be exactly 32bytes long');\n    }\n    this.#rawKey = key;\n    this.#derKey = Ed25519PublicKey.derEncode(key);\n  }\n\n  public toDer(): DerEncodedPublicKey {\n    return this.derKey;\n  }\n\n  public toRaw(): ArrayBuffer {\n    return this.rawKey;\n  }\n}\n\n/**\n * Ed25519KeyIdentity is an implementation of SignIdentity that uses Ed25519 keys. This class is used to sign and verify messages for an agent.\n */\nexport class Ed25519KeyIdentity extends SignIdentity {\n  /**\n   * Generate a new Ed25519KeyIdentity.\n   * @param seed a 32-byte seed for the private key. If not provided, a random seed will be generated.\n   * @returns Ed25519KeyIdentity\n   */\n  public static generate(seed?: Uint8Array): Ed25519KeyIdentity {\n\n    if (seed && seed.length !== 32) {\n      throw new Error('Ed25519 Seed needs to be 32 bytes long.');\n    }\n    if (!seed) seed = ed25519.utils.randomPrivateKey();\n    // Check if the seed is all zeros\n    if(bufEquals(seed, new Uint8Array(new Array(32).fill(0)))) {\n      console.warn('Seed is all zeros. This is not a secure seed. Please provide a seed with sufficient entropy if this is a production environment.');\n    }\n    const sk = new Uint8Array(32);\n    for (let i = 0; i < 32; i++) sk[i] = new Uint8Array(seed)[i];\n\n    const pk = ed25519.getPublicKey(sk);\n    return Ed25519KeyIdentity.fromKeyPair(pk, sk);\n  }\n\n  public static fromParsedJson(obj: JsonnableEd25519KeyIdentity): Ed25519KeyIdentity {\n    const [publicKeyDer, privateKeyRaw] = obj;\n    return new Ed25519KeyIdentity(\n      Ed25519PublicKey.fromDer(fromHex(publicKeyDer) as DerEncodedPublicKey),\n      fromHex(privateKeyRaw),\n    );\n  }\n\n  public static fromJSON(json: string): Ed25519KeyIdentity {\n    const parsed = JSON.parse(json);\n    if (Array.isArray(parsed)) {\n      if (typeof parsed[0] === 'string' && typeof parsed[1] === 'string') {\n        return this.fromParsedJson([parsed[0], parsed[1]]);\n      } else {\n        throw new Error('Deserialization error: JSON must have at least 2 items.');\n      }\n    }\n    throw new Error(`Deserialization error: Invalid JSON type for string: ${JSON.stringify(json)}`);\n  }\n\n  public static fromKeyPair(publicKey: ArrayBuffer, privateKey: ArrayBuffer): Ed25519KeyIdentity {\n    return new Ed25519KeyIdentity(Ed25519PublicKey.fromRaw(publicKey), privateKey);\n  }\n\n  public static fromSecretKey(secretKey: ArrayBuffer): Ed25519KeyIdentity {\n    const publicKey = ed25519.getPublicKey(new Uint8Array(secretKey));\n    return Ed25519KeyIdentity.fromKeyPair(publicKey, secretKey);\n  }\n\n  #publicKey: Ed25519PublicKey;\n  #privateKey: Uint8Array;\n\n  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n  protected constructor(publicKey: PublicKey, privateKey: ArrayBuffer) {\n    super();\n    this.#publicKey = Ed25519PublicKey.from(publicKey);\n    this.#privateKey = new Uint8Array(privateKey);\n  }\n\n  /**\n   * Serialize this key to JSON.\n   */\n  public toJSON(): JsonnableEd25519KeyIdentity {\n    return [toHex(this.#publicKey.toDer()), toHex(this.#privateKey)];\n  }\n\n  /**\n   * Return a copy of the key pair.\n   */\n  public getKeyPair(): KeyPair {\n    return {\n      secretKey: this.#privateKey,\n      publicKey: this.#publicKey,\n    };\n  }\n\n  /**\n   * Return the public key.\n   */\n  public getPublicKey(): Required<PublicKey> {\n    return this.#publicKey;\n  }\n\n  /**\n   * Signs a blob of data, with this identity's private key.\n   * @param challenge - challenge to sign with this identity's secretKey, producing a signature\n   */\n  public async sign(challenge: ArrayBuffer): Promise<Signature> {\n    const blob = new Uint8Array(challenge);\n    // Some implementations of Ed25519 private keys append a public key to the end of the private key. We only want the private key.\n    const signature = uint8ToBuf(ed25519.sign(blob, this.#privateKey.slice(0, 32)));\n    // add { __signature__: void; } to the signature to make it compatible with the agent\n\n    Object.defineProperty(signature, '__signature__', {\n      enumerable: false,\n      value: undefined,\n    });\n\n    return signature as Signature;\n  }\n\n  /**\n   * Verify\n   * @param sig - signature to verify\n   * @param msg - message to verify\n   * @param pk - public key\n   * @returns - true if the signature is valid, false otherwise\n   */\n  public static verify(\n    sig: ArrayBuffer | Uint8Array | string,\n    msg: ArrayBuffer | Uint8Array | string,\n    pk: ArrayBuffer | Uint8Array | string,\n  ) {\n    const [signature, message, publicKey] = [sig, msg, pk].map(x => {\n      if (typeof x === 'string') {\n        x = fromHex(x);\n      }\n      if (x instanceof Uint8Array) {\n        x = x.buffer;\n      }\n      return new Uint8Array(x);\n    });\n    return ed25519.verify(message, signature, publicKey);\n  }\n}\n\ntype PublicKeyHex = string;\ntype SecretKeyHex = string;\nexport type JsonnableEd25519KeyIdentity = [PublicKeyHex, SecretKeyHex];\n", "import { DerEncodedPublicKey, PublicKey, Signature, SignIdentity } from '@dfinity/agent';\n\n/**\n * Options used in a {@link ECDSAKeyIdentity}\n */\nexport type CryptoKeyOptions = {\n  extractable?: boolean;\n  keyUsages?: KeyUsage[];\n  subtleCrypto?: SubtleCrypto;\n};\n\nexport class CryptoError extends Error {\n  constructor(public readonly message: string) {\n    super(message);\n    Object.setPrototypeOf(this, CryptoError.prototype);\n  }\n}\n\nexport interface DerCryptoKey extends CryptoKey {\n  toDer: () => DerEncodedPublicKey;\n}\n\n/**\n * Utility method to ensure that a subtleCrypto implementation is provided or is available in the global context\n * @param subtleCrypto SubtleCrypto implementation\n * @returns subleCrypto\n */\nfunction _getEffectiveCrypto(subtleCrypto: CryptoKeyOptions['subtleCrypto']): SubtleCrypto {\n  if (typeof global !== 'undefined' && global['crypto'] && global['crypto']['subtle']) {\n    return global['crypto']['subtle'];\n  }\n  if (subtleCrypto) {\n    return subtleCrypto;\n  } else if (typeof crypto !== 'undefined' && crypto['subtle']) {\n    return crypto.subtle;\n  } else {\n    throw new CryptoError(\n      'Global crypto was not available and none was provided. Please inlcude a SubtleCrypto implementation. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto',\n    );\n  }\n}\n\n/**\n * An identity interface that wraps an ECDSA keypair using the P-256 named curve. Supports DER-encoding and decoding for agent calls\n */\nexport class ECDSAKeyIdentity extends SignIdentity {\n  /**\n   * Generates a randomly generated identity for use in calls to the Internet Computer.\n   * @param {CryptoKeyOptions} options optional settings\n   * @param {CryptoKeyOptions['extractable']} options.extractable - whether the key should allow itself to be used. Set to false for maximum security.\n   * @param {CryptoKeyOptions['keyUsages']} options.keyUsages - a list of key usages that the key can be used for\n   * @param {CryptoKeyOptions['subtleCrypto']} options.subtleCrypto interface\n   * @constructs ECDSAKeyIdentity\n   * @returns a {@link ECDSAKeyIdentity}\n   */\n  public static async generate(options?: CryptoKeyOptions): Promise<ECDSAKeyIdentity> {\n    const { extractable = false, keyUsages = ['sign', 'verify'], subtleCrypto } = options ?? {};\n    const effectiveCrypto = _getEffectiveCrypto(subtleCrypto);\n    const keyPair = await effectiveCrypto.generateKey(\n      {\n        name: 'ECDSA',\n        namedCurve: 'P-256',\n      },\n      extractable,\n      keyUsages,\n    );\n    const derKey = (await effectiveCrypto.exportKey(\n      'spki',\n      keyPair.publicKey,\n    )) as DerEncodedPublicKey;\n\n    return new this(keyPair, derKey, effectiveCrypto);\n  }\n\n  /**\n   * generates an identity from a public and private key. Please ensure that you are generating these keys securely and protect the user's private key\n   * @param keyPair a CryptoKeyPair\n   * @param subtleCrypto - a SubtleCrypto interface in case one is not available globally\n   * @returns an {@link ECDSAKeyIdentity}\n   */\n  public static async fromKeyPair(\n    keyPair: CryptoKeyPair | { privateKey: CryptoKey; publicKey: CryptoKey },\n    subtleCrypto?: SubtleCrypto,\n  ): Promise<ECDSAKeyIdentity> {\n    const effectiveCrypto = _getEffectiveCrypto(subtleCrypto);\n    const derKey = (await effectiveCrypto.exportKey(\n      'spki',\n      keyPair.publicKey,\n    )) as DerEncodedPublicKey;\n    return new ECDSAKeyIdentity(keyPair, derKey, effectiveCrypto);\n  }\n\n  protected _derKey: DerEncodedPublicKey;\n  protected _keyPair: CryptoKeyPair;\n  protected _subtleCrypto: SubtleCrypto;\n\n  // `fromKeyPair` and `generate` should be used for instantiation, not this constructor.\n  protected constructor(\n    keyPair: CryptoKeyPair,\n    derKey: DerEncodedPublicKey,\n    subtleCrypto: SubtleCrypto,\n  ) {\n    super();\n    this._keyPair = keyPair;\n    this._derKey = derKey;\n    this._subtleCrypto = subtleCrypto;\n  }\n\n  /**\n   * Return the internally-used key pair.\n   * @returns a CryptoKeyPair\n   */\n  public getKeyPair(): CryptoKeyPair {\n    return this._keyPair;\n  }\n\n  /**\n   * Return the public key.\n   * @returns an {@link PublicKey & DerCryptoKey}\n   */\n  public getPublicKey(): PublicKey & DerCryptoKey {\n    const derKey = this._derKey;\n    const key: DerCryptoKey = Object.create(this._keyPair.publicKey);\n    key.toDer = function () {\n      return derKey;\n    };\n\n    return key;\n  }\n\n  /**\n   * Signs a blob of data, with this identity's private key.\n   * @param {ArrayBuffer} challenge - challenge to sign with this identity's secretKey, producing a signature\n   * @returns {Promise<Signature>} signature\n   */\n  public async sign(challenge: ArrayBuffer): Promise<Signature> {\n    const params: EcdsaParams = {\n      name: 'ECDSA',\n      hash: { name: 'SHA-256' },\n    };\n    const signature = await this._subtleCrypto.sign(params, this._keyPair.privateKey, challenge);\n\n    return signature as Signature;\n  }\n}\n\nexport default ECDSAKeyIdentity;\n", "import { Identity, PublicKey } from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\n\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nexport class PartialIdentity implements Identity {\n  #inner: PublicKey;\n\n  /**\n   * The raw public key of this identity.\n   */\n  get rawKey(): ArrayBuffer | undefined {\n    return this.#inner.rawKey;\n  }\n\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  get derKey(): ArrayBuffer | undefined {\n    return this.#inner.derKey;\n  }\n\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  public toDer(): ArrayBuffer {\n    return this.#inner.toDer();\n  }\n\n  /**\n   * The inner {@link PublicKey} used by this identity.\n   */\n  public getPublicKey(): PublicKey {\n    return this.#inner;\n  }\n\n  /**\n   * The {@link Principal} of this identity.\n   */\n  public getPrincipal(): Principal {\n    return Principal.from(this.#inner.rawKey);\n  }\n\n  /**\n   * Required for the Identity interface, but cannot implemented for just a public key.\n   */\n  public transformRequest(): Promise<never> {\n    return Promise.reject(\n      'Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.',\n    );\n  }\n\n  constructor(inner: PublicKey) {\n    this.#inner = inner;\n  }\n}\n", "import {\n  DerEncodedPublicKey,\n  fromHex,\n  HttpAgentRequest,\n  PublicKey,\n  requestIdOf,\n  Signature,\n  SignIdentity,\n  toHex,\n} from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\nimport * as cbor from 'simple-cbor';\nimport { PartialIdentity } from './partial';\n\nconst domainSeparator = new TextEncoder().encode('\\x1Aic-request-auth-delegation');\nconst requestDomainSeparator = new TextEncoder().encode('\\x0Aic-request');\n\nfunction _parseBlob(value: unknown): ArrayBuffer {\n  if (typeof value !== 'string' || value.length < 64) {\n    throw new Error('Invalid public key.');\n  }\n\n  return fromHex(value);\n}\n\n/**\n * A single delegation object that is signed by a private key. This is constructed by\n * `DelegationChain.create()`.\n *\n * {@see DelegationChain}\n */\nexport class Delegation {\n  constructor(\n    public readonly pubkey: ArrayBuffer,\n    public readonly expiration: bigint,\n    public readonly targets?: Principal[],\n  ) {}\n\n  public toCBOR(): cbor.CborValue {\n    // Expiration field needs to be encoded as a u64 specifically.\n    return cbor.value.map({\n      pubkey: cbor.value.bytes(this.pubkey),\n      expiration: cbor.value.u64(this.expiration.toString(16), 16),\n      ...(this.targets && {\n        targets: cbor.value.array(this.targets.map(t => cbor.value.bytes(t.toUint8Array()))),\n      }),\n    });\n  }\n\n  public toJSON(): JsonnableDelegation {\n    // every string should be hex and once-de-hexed,\n    // discoverable what it is (e.g. de-hex to get JSON with a 'type' property, or de-hex to DER\n    // with an OID). After de-hex, if it's not obvious what it is, it's an ArrayBuffer.\n    return {\n      expiration: this.expiration.toString(16),\n      pubkey: toHex(this.pubkey),\n      ...(this.targets && { targets: this.targets.map(p => p.toHex()) }),\n    };\n  }\n}\n\n/**\n * Type of ReturnType<Delegation.toJSON>.\n * The goal here is to stringify all non-JSON-compatible types to some bytes representation we can\n * stringify as hex.\n * (Hex shouldn't be ambiguous ever, because you can encode as DER with semantic OIDs).\n */\ninterface JsonnableDelegation {\n  // A BigInt of Nanoseconds since epoch as hex\n  expiration: string;\n  // Hexadecimal representation of the DER public key.\n  pubkey: string;\n  // Array of strings, where each string is hex of principal blob (*NOT* textual representation).\n  targets?: string[];\n}\n\n/**\n * A signed delegation, which lends its identity to the public key in the delegation\n * object. This is constructed by `DelegationChain.create()`.\n *\n * {@see DelegationChain}\n */\nexport interface SignedDelegation {\n  delegation: Delegation;\n  signature: Signature;\n}\n\n/**\n * Sign a single delegation object for a period of time.\n * @param from The identity that lends its delegation.\n * @param to The identity that receives the delegation.\n * @param expiration An expiration date for this delegation.\n * @param targets Limit this delegation to the target principals.\n */\nasync function _createSingleDelegation(\n  from: SignIdentity,\n  to: PublicKey,\n  expiration: Date,\n  targets?: Principal[],\n): Promise<SignedDelegation> {\n  const delegation: Delegation = new Delegation(\n    to.toDer(),\n    BigInt(+expiration) * BigInt(1000000), // In nanoseconds.\n    targets,\n  );\n  // The signature is calculated by signing the concatenation of the domain separator\n  // and the message.\n  // Note: To ensure Safari treats this as a user gesture, ensure to not use async methods\n  // besides the actualy webauthn functionality (such as `sign`). Safari will de-register\n  // a user gesture if you await an async call thats not fetch, xhr, or setTimeout.\n  const challenge = new Uint8Array([\n    ...domainSeparator,\n    ...new Uint8Array(requestIdOf({ ...delegation })),\n  ]);\n  const signature = await from.sign(challenge);\n\n  return {\n    delegation,\n    signature,\n  };\n}\n\nexport interface JsonnableDelegationChain {\n  publicKey: string;\n  delegations: Array<{\n    signature: string;\n    delegation: {\n      pubkey: string;\n      expiration: string;\n      targets?: string[];\n    };\n  }>;\n}\n\n/**\n * A chain of delegations. This is JSON Serializable.\n * This is the object to serialize and pass to a DelegationIdentity. It does not keep any\n * private keys.\n */\nexport class DelegationChain {\n  /**\n   * Create a delegation chain between two (or more) keys. By default, the expiration time\n   * will be very short (15 minutes).\n   *\n   * To build a chain of more than 2 identities, this function needs to be called multiple times,\n   * passing the previous delegation chain into the options argument. For example:\n   * @example\n   * const rootKey = createKey();\n   * const middleKey = createKey();\n   * const bottomeKey = createKey();\n   *\n   * const rootToMiddle = await DelegationChain.create(\n   *   root, middle.getPublicKey(), Date.parse('2100-01-01'),\n   * );\n   * const middleToBottom = await DelegationChain.create(\n   *   middle, bottom.getPublicKey(), Date.parse('2100-01-01'), { previous: rootToMiddle },\n   * );\n   *\n   * // We can now use a delegation identity that uses the delegation above:\n   * const identity = DelegationIdentity.fromDelegation(bottomKey, middleToBottom);\n   * @param from The identity that will delegate.\n   * @param to The identity that gets delegated. It can now sign messages as if it was the\n   *           identity above.\n   * @param expiration The length the delegation is valid. By default, 15 minutes from calling\n   *                   this function.\n   * @param options A set of options for this delegation. expiration and previous\n   * @param options.previous - Another DelegationChain that this chain should start with.\n   * @param options.targets - targets that scope the delegation (e.g. Canister Principals)\n   */\n  public static async create(\n    from: SignIdentity,\n    to: PublicKey,\n    expiration: Date = new Date(Date.now() + 15 * 60 * 1000),\n    options: {\n      previous?: DelegationChain;\n      targets?: Principal[];\n    } = {},\n  ): Promise<DelegationChain> {\n    const delegation = await _createSingleDelegation(from, to, expiration, options.targets);\n    return new DelegationChain(\n      [...(options.previous?.delegations || []), delegation],\n      options.previous?.publicKey || from.getPublicKey().toDer(),\n    );\n  }\n\n  /**\n   * Creates a DelegationChain object from a JSON string.\n   * @param json The JSON string to parse.\n   */\n  public static fromJSON(json: string | JsonnableDelegationChain): DelegationChain {\n    const { publicKey, delegations } = typeof json === 'string' ? JSON.parse(json) : json;\n    if (!Array.isArray(delegations)) {\n      throw new Error('Invalid delegations.');\n    }\n\n    const parsedDelegations: SignedDelegation[] = delegations.map(signedDelegation => {\n      const { delegation, signature } = signedDelegation;\n      const { pubkey, expiration, targets } = delegation;\n      if (targets !== undefined && !Array.isArray(targets)) {\n        throw new Error('Invalid targets.');\n      }\n\n      return {\n        delegation: new Delegation(\n          _parseBlob(pubkey),\n          BigInt('0x' + expiration), // expiration in JSON is an hexa string (See toJSON() below).\n          targets &&\n            targets.map((t: unknown) => {\n              if (typeof t !== 'string') {\n                throw new Error('Invalid target.');\n              }\n              return Principal.fromHex(t);\n            }),\n        ),\n        signature: _parseBlob(signature) as Signature,\n      };\n    });\n\n    return new this(parsedDelegations, _parseBlob(publicKey) as DerEncodedPublicKey);\n  }\n\n  /**\n   * Creates a DelegationChain object from a list of delegations and a DER-encoded public key.\n   * @param delegations The list of delegations.\n   * @param publicKey The DER-encoded public key of the key-pair signing the first delegation.\n   */\n  public static fromDelegations(\n    delegations: SignedDelegation[],\n    publicKey: DerEncodedPublicKey,\n  ): DelegationChain {\n    return new this(delegations, publicKey);\n  }\n\n  protected constructor(\n    public readonly delegations: SignedDelegation[],\n    public readonly publicKey: DerEncodedPublicKey,\n  ) {}\n\n  public toJSON(): JsonnableDelegationChain {\n    return {\n      delegations: this.delegations.map(signedDelegation => {\n        const { delegation, signature } = signedDelegation;\n        const { targets } = delegation;\n        return {\n          delegation: {\n            expiration: delegation.expiration.toString(16),\n            pubkey: toHex(delegation.pubkey),\n            ...(targets && {\n              targets: targets.map(t => t.toHex()),\n            }),\n          },\n          signature: toHex(signature),\n        };\n      }),\n      publicKey: toHex(this.publicKey),\n    };\n  }\n}\n\n/**\n * An Identity that adds delegation to a request. Everywhere in this class, the name\n * innerKey refers to the SignIdentity that is being used to sign the requests, while\n * originalKey is the identity that is being borrowed. More identities can be used\n * in the middle to delegate.\n */\nexport class DelegationIdentity extends SignIdentity {\n  /**\n   * Create a delegation without having access to delegateKey.\n   * @param key The key used to sign the requests.\n   * @param delegation A delegation object created using `createDelegation`.\n   */\n  public static fromDelegation(\n    key: Pick<SignIdentity, 'sign'>,\n    delegation: DelegationChain,\n  ): DelegationIdentity {\n    return new this(key, delegation);\n  }\n\n  protected constructor(\n    private _inner: Pick<SignIdentity, 'sign'>,\n    private _delegation: DelegationChain,\n  ) {\n    super();\n  }\n\n  public getDelegation(): DelegationChain {\n    return this._delegation;\n  }\n\n  public getPublicKey(): PublicKey {\n    return {\n      derKey: this._delegation.publicKey,\n      toDer: () => this._delegation.publicKey,\n    };\n  }\n  public sign(blob: ArrayBuffer): Promise<Signature> {\n    return this._inner.sign(blob);\n  }\n\n  public async transformRequest(request: HttpAgentRequest): Promise<unknown> {\n    const { body, ...fields } = request;\n    const requestId = await requestIdOf(body);\n    return {\n      ...fields,\n      body: {\n        content: body,\n        sender_sig: await this.sign(\n          new Uint8Array([...requestDomainSeparator, ...new Uint8Array(requestId)]),\n        ),\n        sender_delegation: this._delegation.delegations,\n        sender_pubkey: this._delegation.publicKey,\n      },\n    };\n  }\n}\n\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nexport class PartialDelegationIdentity extends PartialIdentity {\n  #delegation: DelegationChain;\n\n  /**\n   * The Delegation Chain of this identity.\n   */\n  get delegation(): DelegationChain {\n    return this.#delegation;\n  }\n\n  private constructor(inner: PublicKey, delegation: DelegationChain) {\n    super(inner);\n    this.#delegation = delegation;\n  }\n\n  /**\n   * Create a {@link PartialDelegationIdentity} from a {@link PublicKey} and a {@link DelegationChain}.\n   * @param key The {@link PublicKey} to delegate to.\n   * @param delegation a {@link DelegationChain} targeting the inner key.\n   * @constructs PartialDelegationIdentity\n   */\n  public static fromDelegation(key: PublicKey, delegation: DelegationChain) {\n    return new PartialDelegationIdentity(key, delegation);\n  }\n}\n\n/**\n * List of things to check for a delegation chain validity.\n */\nexport interface DelegationValidChecks {\n  /**\n   * Check that the scope is amongst the scopes that this delegation has access to.\n   */\n  scope?: Principal | string | Array<Principal | string>;\n}\n\n/**\n * Analyze a DelegationChain and validate that it's valid, ie. not expired and apply to the\n * scope.\n * @param chain The chain to validate.\n * @param checks Various checks to validate on the chain.\n */\nexport function isDelegationValid(chain: DelegationChain, checks?: DelegationValidChecks): boolean {\n  // Verify that the no delegation is expired. If any are in the chain, returns false.\n  for (const { delegation } of chain.delegations) {\n    // prettier-ignore\n    if (+new Date(Number(delegation.expiration / BigInt(1000000))) <= +Date.now()) {\n      return false;\n    }\n  }\n\n  // Check the scopes.\n  const scopes: Principal[] = [];\n  const maybeScope = checks?.scope;\n  if (maybeScope) {\n    if (Array.isArray(maybeScope)) {\n      scopes.push(...maybeScope.map(s => (typeof s === 'string' ? Principal.fromText(s) : s)));\n    } else {\n      scopes.push(typeof maybeScope === 'string' ? Principal.fromText(maybeScope) : maybeScope);\n    }\n  }\n\n  for (const s of scopes) {\n    const scope = s.toText();\n    for (const { delegation } of chain.delegations) {\n      if (delegation.targets === undefined) {\n        continue;\n      }\n\n      let none = true;\n      for (const target of delegation.targets) {\n        if (target.toText() === scope) {\n          none = false;\n          break;\n        }\n      }\n      if (none) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n", "import {\n  DerEncodedPublicKey,\n  PublicKey,\n  Signature,\n  SignIdentity,\n  wrapDER,\n  DER_COSE_OID,\n  fromHex,\n  toHex,\n} from '@dfinity/agent';\nimport borc from 'borc';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bufFromBufLike } from '@dfinity/candid';\n\nfunction _coseToDerEncodedBlob(cose: ArrayBuffer): DerEncodedPublicKey {\n  return wrapDER(cose, DER_COSE_OID).buffer as DerEncodedPublicKey;\n}\n\ntype PublicKeyCredentialWithAttachment = PublicKeyCredential & {\n  // Extends `PublicKeyCredential` with an optional field introduced in the WebAuthn level 3 spec:\n  // https://w3c.github.io/webauthn/#dom-publickeycredential-authenticatorattachment\n  // Already supported by Chrome, Safari and Edge\n  // Note: `null` is included here as a possible value because Edge set this value to null in the\n  // past.\n  authenticatorAttachment: AuthenticatorAttachment | undefined | null;\n};\n\n/**\n * From the documentation;\n * The authData is a byte array described in the spec. Parsing it will involve slicing bytes from\n * the array and converting them into usable objects.\n *\n * See https://webauthn.guide/#registration (subsection \"Example: Parsing the authenticator data\").\n * @param authData The authData field of the attestation response.\n * @returns The COSE key of the authData.\n */\nfunction _authDataToCose(authData: ArrayBuffer): ArrayBuffer {\n  const dataView = new DataView(new ArrayBuffer(2));\n  const idLenBytes = authData.slice(53, 55);\n  [...new Uint8Array(idLenBytes)].forEach((v, i) => dataView.setUint8(i, v));\n  const credentialIdLength = dataView.getUint16(0);\n\n  // Get the public key object.\n  return authData.slice(55 + credentialIdLength);\n}\n\nexport class CosePublicKey implements PublicKey {\n  protected _encodedKey: DerEncodedPublicKey;\n\n  public constructor(protected _cose: ArrayBuffer) {\n    this._encodedKey = _coseToDerEncodedBlob(_cose);\n  }\n\n  public toDer(): DerEncodedPublicKey {\n    return this._encodedKey;\n  }\n\n  public getCose(): ArrayBuffer {\n    return this._cose;\n  }\n}\n\n/**\n * Create a challenge from a string or array. The default challenge is always the same\n * because we don't need to verify the authenticity of the key on the server (we don't\n * register our keys with the IC). Any challenge would do, even one per key, randomly\n * generated.\n * @param challenge The challenge to transform into a byte array. By default a hard\n *        coded string.\n */\nfunction _createChallengeBuffer(challenge: string | Uint8Array = '<ic0.app>'): Uint8Array {\n  if (typeof challenge === 'string') {\n    return Uint8Array.from(challenge, c => c.charCodeAt(0));\n  } else {\n    return challenge;\n  }\n}\n\n/**\n * Create a credentials to authenticate with a server. This is necessary in order in\n * WebAuthn to get credentials IDs (which give us the public key and allow us to\n * sign), but in the case of the Internet Computer, we don't actually need to register\n * it, so we don't.\n * @param credentialCreationOptions an optional CredentialCreationOptions object\n */\nasync function _createCredential(\n  credentialCreationOptions?: CredentialCreationOptions,\n): Promise<PublicKeyCredentialWithAttachment | null> {\n  const creds = (await navigator.credentials.create(\n    credentialCreationOptions ?? {\n      publicKey: {\n        authenticatorSelection: {\n          userVerification: 'preferred',\n        },\n        attestation: 'direct',\n        challenge: _createChallengeBuffer(),\n        pubKeyCredParams: [{ type: 'public-key', alg: PubKeyCoseAlgo.ECDSA_WITH_SHA256 }],\n        rp: {\n          name: 'Internet Identity Service',\n        },\n        user: {\n          id: randomBytes(16),\n          name: 'Internet Identity',\n          displayName: 'Internet Identity',\n        },\n      },\n    },\n  )) as PublicKeyCredentialWithAttachment | null;\n\n  if (creds === null) {\n    return null;\n  }\n\n  return {\n    // do _not_ use ...creds here, as creds is not enumerable in all cases\n    id: creds.id,\n    response: creds.response,\n    type: creds.type,\n    authenticatorAttachment: creds.authenticatorAttachment,\n    getClientExtensionResults: creds.getClientExtensionResults,\n    // Some password managers will return a Uint8Array, so we ensure we return an ArrayBuffer.\n    rawId: bufFromBufLike(creds.rawId),\n  };\n}\n\n// See https://www.iana.org/assignments/cose/cose.xhtml#algorithms for a complete\n// list of these algorithms. We only list the ones we support here.\nenum PubKeyCoseAlgo {\n  ECDSA_WITH_SHA256 = -7,\n}\n\n/**\n * A SignIdentity that uses `navigator.credentials`. See https://webauthn.guide/ for\n * more information about WebAuthentication.\n */\nexport class WebAuthnIdentity extends SignIdentity {\n  /**\n   * Create an identity from a JSON serialization.\n   * @param json - json to parse\n   */\n  public static fromJSON(json: string): WebAuthnIdentity {\n    const { publicKey, rawId } = JSON.parse(json);\n\n    if (typeof publicKey !== 'string' || typeof rawId !== 'string') {\n      throw new Error('Invalid JSON string.');\n    }\n\n    return new this(fromHex(rawId), fromHex(publicKey), undefined);\n  }\n\n  /**\n   * Create an identity.\n   * @param credentialCreationOptions an optional CredentialCreationOptions Challenge\n   */\n  public static async create(\n    credentialCreationOptions?: CredentialCreationOptions,\n  ): Promise<WebAuthnIdentity> {\n    const creds = await _createCredential(credentialCreationOptions);\n\n    if (!creds || creds.type !== 'public-key') {\n      throw new Error('Could not create credentials.');\n    }\n\n    const response = creds.response as AuthenticatorAttestationResponse;\n    if (response.attestationObject === undefined) {\n      throw new Error('Was expecting an attestation response.');\n    }\n\n    // Parse the attestationObject as CBOR.\n    const attObject = borc.decodeFirst(new Uint8Array(response.attestationObject));\n\n    return new this(\n      creds.rawId,\n      _authDataToCose(attObject.authData),\n      creds.authenticatorAttachment ?? undefined,\n    );\n  }\n\n  protected _publicKey: CosePublicKey;\n\n  public constructor(\n    public readonly rawId: ArrayBuffer,\n    cose: ArrayBuffer,\n    protected authenticatorAttachment: AuthenticatorAttachment | undefined,\n  ) {\n    super();\n    this._publicKey = new CosePublicKey(cose);\n  }\n\n  public getPublicKey(): PublicKey {\n    return this._publicKey;\n  }\n\n  /**\n   * WebAuthn level 3 spec introduces a new attribute on successful WebAuthn interactions,\n   * see https://w3c.github.io/webauthn/#dom-publickeycredential-authenticatorattachment.\n   * This attribute is already implemented for Chrome, Safari and Edge.\n   *\n   * Given the attribute is only available after a successful interaction, the information is\n   * provided opportunistically and might also be `undefined`.\n   */\n  public getAuthenticatorAttachment(): AuthenticatorAttachment | undefined {\n    return this.authenticatorAttachment;\n  }\n\n  public async sign(blob: ArrayBuffer): Promise<Signature> {\n    const result = (await navigator.credentials.get({\n      publicKey: {\n        allowCredentials: [\n          {\n            type: 'public-key',\n            id: this.rawId,\n          },\n        ],\n        challenge: blob,\n        userVerification: 'preferred',\n      },\n    })) as PublicKeyCredentialWithAttachment;\n\n    if (result.authenticatorAttachment !== null) {\n      this.authenticatorAttachment = result.authenticatorAttachment;\n    }\n\n    const response = result.response as AuthenticatorAssertionResponse;\n\n    const cbor = borc.encode(\n      new borc.Tagged(55799, {\n        authenticator_data: new Uint8Array(response.authenticatorData),\n        client_data_json: new TextDecoder().decode(response.clientDataJSON),\n        signature: new Uint8Array(response.signature),\n      }),\n    );\n    if (!cbor) {\n      throw new Error('failed to encode cbor');\n    }\n    return cbor.buffer as Signature;\n  }\n\n  /**\n   * Allow for JSON serialization of all information needed to reuse this identity.\n   */\n  public toJSON(): JsonnableWebAuthnIdentity {\n    return {\n      publicKey: toHex(this._publicKey.getCose()),\n      rawId: toHex(this.rawId),\n    };\n  }\n}\n\n/**\n * ReturnType<WebAuthnIdentity.toJSON>\n */\nexport interface JsonnableWebAuthnIdentity {\n  // The hexadecimal representation of the DER encoded public key.\n  publicKey: string;\n  // The string representation of the local WebAuthn Credential.id (base64url encoded).\n  rawId: string;\n}\n", "const ENCODE_CHUNK_SIZE = 100000;\n\nexport const fromBase64 = (base64: string): ArrayBuffer => {\n  if (typeof globalThis.Buffer !== \"undefined\") {\n    return globalThis.Buffer.from(base64, \"base64\").buffer;\n  }\n  if (typeof globalThis.atob !== \"undefined\") {\n    return Uint8Array.from(globalThis.atob(base64), (m) => m.charCodeAt(0))\n      .buffer;\n  }\n  throw Error(\"Could not decode base64 string\");\n};\n\nexport const toBase64 = (bytes: ArrayBuffer): string => {\n  if (typeof globalThis.Buffer !== \"undefined\") {\n    return globalThis.Buffer.from(bytes).toString(\"base64\");\n  }\n  if (typeof globalThis.btoa !== \"undefined\") {\n    return btoa(\n      Array.from({ length: Math.ceil(bytes.byteLength / ENCODE_CHUNK_SIZE) })\n        .map((_, index) =>\n          String.fromCharCode(\n            ...new Uint8Array(\n              bytes.slice(\n                index * ENCODE_CHUNK_SIZE,\n                (index + 1) * ENCODE_CHUNK_SIZE,\n              ),\n            ),\n          ),\n        )\n        .join(\"\"),\n    );\n  }\n  throw Error(\"Could not encode base64 string\");\n};\n", "import { Principal } from \"@dfinity/principal\";\nimport { Delegation, DelegationChain } from \"@dfinity/identity\";\nimport { type Signature } from \"@dfinity/agent\";\nimport type { JsonValue } from \"@dfinity/candid\";\nimport type {\n  Channel,\n  JsonError,\n  JsonRequest,\n  JsonResponse,\n  Transport,\n} from \"./transport\";\nimport type {\n  PermissionScope,\n  PermissionsRequest,\n  PermissionsResponse,\n  PermissionState,\n  RequestPermissionsRequest,\n  RequestPermissionsResponse,\n  SupportedStandard,\n  SupportedStandardsRequest,\n  SupportedStandardsResponse,\n} from \"./icrc25\";\nimport type {\n  AccountsPermissionScope,\n  AccountsRequest,\n  AccountsResponse,\n} from \"./icrc27\";\nimport type {\n  DelegationPermissionScope,\n  DelegationRequest,\n  DelegationResponse,\n} from \"./icrc34\";\nimport type {\n  CallCanisterPermissionScope,\n  CallCanisterRequest,\n  CallCanisterResponse,\n} from \"./icrc49\";\nimport { NETWORK_ERROR } from \"./errors\";\nimport { fromBase64, toBase64 } from \"./utils\";\nimport type {\n  BatchCallCanisterPermissionScope,\n  BatchCallCanisterRequest,\n  BatchCallCanisterResponse,\n} from \"./icrc112\";\n\nexport class SignerError extends Error {\n  public code: number;\n  public data?: JsonValue;\n\n  constructor(error: JsonError) {\n    super(error.message);\n    Object.setPrototypeOf(this, SignerError.prototype);\n\n    this.code = error.code;\n    this.data = error.data;\n  }\n}\n\nconst wrapTransportError = (error: unknown) =>\n  new SignerError({\n    code: NETWORK_ERROR,\n    message: error instanceof Error ? error.message : \"Network error\",\n  });\n\nconst unwrapResponse = <T extends JsonValue>(response: JsonResponse<T>): T => {\n  if (\"error\" in response) {\n    throw new SignerError(response.error);\n  }\n  if (\"result\" in response) {\n    return response.result;\n  }\n  throw new SignerError({\n    code: NETWORK_ERROR,\n    message: \"Invalid response\",\n  });\n};\n\nexport type SignerPermissionScope =\n  | PermissionScope\n  | AccountsPermissionScope\n  | DelegationPermissionScope\n  | CallCanisterPermissionScope\n  | BatchCallCanisterPermissionScope;\n\nexport interface SignerOptions<T extends Transport> {\n  /**\n   * The transport used to send and receive messages\n   */\n  transport: T;\n  /**\n   * Automatically close transport channel after response has been received\n   * @default true\n   */\n  autoCloseTransportChannel?: boolean;\n  /**\n   * Automatically close transport channel after a given duration in ms\n   * @default 200\n   */\n  closeTransportChannelAfter?: number;\n  /**\n   * Get random uuid implementation for request message ids\n   * @default globalThis.crypto\n   */\n  crypto?: Pick<Crypto, \"randomUUID\">;\n  /**\n   * Origin to use to derive identity\n   */\n  derivationOrigin?: string;\n}\n\nexport class Signer<T extends Transport = Transport> {\n  readonly #options: Required<Omit<SignerOptions<T>, \"derivationOrigin\">> &\n    Pick<SignerOptions<T>, \"derivationOrigin\">;\n  #channel?: Channel;\n  #establishingChannel?: Promise<void>;\n  #scheduledChannelClosure?: ReturnType<typeof setTimeout>;\n\n  constructor(options: SignerOptions<T>) {\n    this.#options = {\n      autoCloseTransportChannel: true,\n      closeTransportChannelAfter: 200,\n      crypto: globalThis.crypto,\n      ...options,\n    };\n  }\n\n  get transport(): T {\n    return this.#options.transport;\n  }\n\n  async openChannel(): Promise<Channel> {\n    // Stop any existing channel from being closed\n    clearTimeout(this.#scheduledChannelClosure);\n\n    // Wait for ongoing establishing of a channel\n    if (this.#establishingChannel) {\n      await this.#establishingChannel;\n    }\n\n    // Reuse existing channel\n    if (this.#channel && !this.#channel.closed) {\n      return this.#channel;\n    }\n\n    // Establish a new transport channel\n    const channel = this.#options.transport.establishChannel();\n    // Indicate that transport channel is being established\n    this.#establishingChannel = channel.then(() => {}).catch(() => {});\n    // Clear previous transport channel\n    this.#channel = undefined;\n    // Assign transport channel once established\n    this.#channel = await channel.catch((error) => {\n      throw wrapTransportError(error);\n    });\n    // Remove transport channel being established indicator\n    this.#establishingChannel = undefined;\n    // Return established channel\n    return this.#channel;\n  }\n\n  async closeChannel(): Promise<void> {\n    await this.#channel?.close();\n  }\n\n  async transformRequest<T extends JsonRequest>(request: T): Promise<T> {\n    if (this.#options.derivationOrigin) {\n      return {\n        ...request,\n        params: {\n          ...request.params,\n          icrc95DerivationOrigin: this.#options.derivationOrigin,\n        },\n      };\n    }\n    return request;\n  }\n\n  async sendRequest<T extends JsonRequest, S extends JsonResponse>(\n    request: T,\n  ): Promise<S> {\n    // Establish new or re-use existing transport channel\n    const channel = await this.openChannel();\n\n    return new Promise<S>(async (resolve, reject) => {\n      // Listen on transport channel for incoming response\n      const responseListener = channel.addEventListener(\n        \"response\",\n        async (response) => {\n          if (response.id !== request.id) {\n            // Ignore responses that don't match the request id\n            return;\n          }\n\n          // Stop listening to events once a valid response has been received\n          responseListener();\n          closeListener();\n\n          // Return response\n          resolve(response as S);\n\n          // Close transport channel after a certain timeout\n          if (this.#options.autoCloseTransportChannel) {\n            this.#scheduledChannelClosure = setTimeout(() => {\n              if (!channel.closed) {\n                channel.close();\n              }\n            }, this.#options.closeTransportChannelAfter);\n          }\n        },\n      );\n\n      // Monitor if channel is closed before a response has been received\n      const closeListener = channel.addEventListener(\"close\", () => {\n        // Stop listening to events once a channel is closed\n        responseListener();\n        closeListener();\n\n        // Throw error if channel is closed before response is received\n        reject(\n          new SignerError({\n            code: NETWORK_ERROR,\n            message: \"Channel was closed before a response was received\",\n          }),\n        );\n      });\n\n      // Send outgoing request over transport channel\n      try {\n        await channel.send(await this.transformRequest(request));\n      } catch (error) {\n        responseListener();\n        closeListener();\n        reject(wrapTransportError(error));\n      }\n    });\n  }\n\n  async supportedStandards(): Promise<SupportedStandard[]> {\n    const response = await this.sendRequest<\n      SupportedStandardsRequest,\n      SupportedStandardsResponse\n    >({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc25_supported_standards\",\n    });\n    const result = unwrapResponse(response);\n    return result.supportedStandards;\n  }\n\n  async requestPermissions(\n    scopes: SignerPermissionScope[],\n  ): Promise<Array<{ scope: SignerPermissionScope; state: PermissionState }>> {\n    const response = await this.sendRequest<\n      RequestPermissionsRequest,\n      RequestPermissionsResponse\n    >({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc25_request_permissions\",\n      params: { scopes },\n    });\n    const result = unwrapResponse(response);\n    return result.scopes;\n  }\n\n  async permissions(): Promise<\n    Array<{ scope: SignerPermissionScope; state: PermissionState }>\n  > {\n    const response = await this.sendRequest<\n      PermissionsRequest,\n      PermissionsResponse\n    >({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc25_permissions\",\n    });\n    const result = unwrapResponse(response);\n    return result.scopes;\n  }\n\n  async accounts(): Promise<\n    Array<{ owner: Principal; subaccount?: ArrayBuffer }>\n  > {\n    const response = await this.sendRequest<AccountsRequest, AccountsResponse>({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc27_accounts\",\n    });\n    const result = unwrapResponse(response);\n    return result.accounts.map(({ owner, subaccount }) => ({\n      owner: Principal.fromText(owner),\n      subaccount: subaccount === undefined ? undefined : fromBase64(subaccount),\n    }));\n  }\n\n  async delegation(params: {\n    publicKey: ArrayBuffer;\n    targets?: Principal[];\n    maxTimeToLive?: bigint;\n  }): Promise<DelegationChain> {\n    const response = await this.sendRequest<\n      DelegationRequest,\n      DelegationResponse\n    >({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc34_delegation\",\n      params: {\n        publicKey: toBase64(params.publicKey),\n        targets: params.targets?.map((p) => p.toText()),\n        maxTimeToLive:\n          params.maxTimeToLive === undefined\n            ? undefined\n            : String(params.maxTimeToLive),\n      },\n    });\n    const result = unwrapResponse(response);\n    return DelegationChain.fromDelegations(\n      result.signerDelegation.map((delegation) => ({\n        delegation: new Delegation(\n          fromBase64(delegation.delegation.pubkey),\n          BigInt(delegation.delegation.expiration),\n          delegation.delegation.targets?.map((principal) =>\n            Principal.fromText(principal),\n          ),\n        ),\n        signature: fromBase64(delegation.signature) as Signature,\n      })),\n      fromBase64(result.publicKey),\n    );\n  }\n\n  async callCanister(params: {\n    canisterId: Principal;\n    sender: Principal;\n    method: string;\n    arg: ArrayBuffer;\n  }): Promise<{ contentMap: ArrayBuffer; certificate: ArrayBuffer }> {\n    const response = await this.sendRequest<\n      CallCanisterRequest,\n      CallCanisterResponse\n    >({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc49_call_canister\",\n      params: {\n        canisterId: params.canisterId.toText(),\n        sender: params.sender.toText(),\n        method: params.method,\n        arg: toBase64(params.arg),\n      },\n    });\n    const result = unwrapResponse(response);\n    const contentMap = fromBase64(result.contentMap);\n    const certificate = fromBase64(result.certificate);\n    return { contentMap, certificate };\n  }\n\n  async batchCallCanister(params: {\n    sender: Principal;\n    requests: {\n      canisterId: Principal;\n      method: string;\n      arg: ArrayBuffer;\n    }[][];\n    validation?: { canisterId: Principal; method: string };\n  }): Promise<\n    (\n      | {\n          result: {\n            contentMap: ArrayBuffer;\n            certificate: ArrayBuffer;\n          };\n        }\n      | {\n          error: JsonError;\n        }\n    )[][]\n  > {\n    const response = await this.sendRequest<\n      BatchCallCanisterRequest,\n      BatchCallCanisterResponse\n    >({\n      id: this.#options.crypto.randomUUID(),\n      jsonrpc: \"2.0\",\n      method: \"icrc112_batch_call_canister\",\n      params: {\n        sender: params.sender.toText(),\n        requests: params.requests.map((requests) =>\n          requests.map((request) => ({\n            canisterId: request.canisterId.toText(),\n            method: request.method,\n            arg: toBase64(request.arg),\n          })),\n        ),\n        validation: params.validation\n          ? {\n              canisterId: params.validation.canisterId.toText(),\n              method: params.validation.method,\n            }\n          : undefined,\n      },\n    });\n    const result = unwrapResponse(response);\n    if (\n      params.requests.length !== result.responses.length ||\n      params.requests.some(\n        (entries, index) => entries.length !== result.responses[index].length,\n      )\n    ) {\n      throw new SignerError({\n        code: NETWORK_ERROR,\n        message:\n          \"Invalid batch call canister response, responses structure does not match request structure\",\n      });\n    }\n    return result.responses.map((responses) =>\n      responses.map((response) => {\n        if (\"result\" in response) {\n          const contentMap = fromBase64(response.result.contentMap);\n          const certificate = fromBase64(response.result.certificate);\n          return { result: { contentMap, certificate } };\n        }\n        return response;\n      }),\n    );\n  }\n}\n", "// JSON RPC errors\nexport const JSON_PARSE_ERROR = -32700;\nexport const INVALID_REQUEST_ERROR = -32600;\nexport const METHOD_NOT_FOUND_ERROR = -32601;\nexport const INVALID_PARAMS_ERROR = -32602;\nexport const INTERNAL_ERROR = -32603;\nexport const isServerError = (error: number) =>\n  error >= -32099 && error <= -32000;\nexport const isJsonRpcError = (error: number) =>\n  error >= -32768 && error <= -32000;\n\n// ICRC-25 errors\nexport const GENERIC_ERROR = 1000;\nexport const NOT_SUPPORTED_ERROR = 2000;\nexport const PERMISSION_NOT_GRANTED_ERROR = 3000;\nexport const ACTION_ABORTED_ERROR = 3001;\nexport const NETWORK_ERROR = 4000;\nexport const isGeneralError = (error: number) => error >= 1000 && error <= 1999;\nexport const isNotSupportedError = (error: number) =>\n  error >= 2000 && error <= 2999;\nexport const isUserActionError = (error: number) =>\n  error >= 3000 && error <= 3999;\nexport const isNetworkError = (error: number) => error >= 4000 && error <= 4999;\n", "import type { PermissionScope } from \"../icrc25\";\nimport type { JsonRequest, JsonResponse } from \"../transport\";\nimport { Principal } from \"@dfinity/principal\";\n\nexport type DelegationPermissionScope = PermissionScope<\"icrc34_delegation\"> & {\n  targets?: string[];\n};\n\nexport type Delegation = {\n  pubkey: string;\n  expiration: string;\n  targets?: string[];\n};\n\nexport type SignerDelegation = {\n  delegation: Delegation;\n  signature: string;\n};\n\nexport const createDelegationPermissionScope = (params: {\n  targets?: Principal[];\n}): DelegationPermissionScope => ({\n  method: \"icrc34_delegation\",\n  targets: params.targets?.map((p) => p.toText()),\n});\n\nexport type DelegationRequest = JsonRequest<\n  \"icrc34_delegation\",\n  {\n    publicKey: string;\n    targets?: string[];\n    maxTimeToLive?: string;\n  }\n>;\n\nexport type DelegationResponse = JsonResponse<{\n  publicKey: string;\n  signerDelegation: SignerDelegation[];\n}>;\n", "import type { JsonArray, JsonObject, JsonValue } from \"@dfinity/candid\";\n\nexport type JsonRPC = {\n  jsonrpc: \"2.0\";\n};\n\nexport type JsonError = {\n  code: number;\n  message: string;\n  data?: JsonValue;\n};\n\nexport type JsonRequest<\n  Method = string,\n  Params extends JsonObject | JsonArray = JsonObject | JsonArray,\n> = JsonRPC & {\n  id?: string | number; // Optional, not required for one way messages\n  method: Method;\n  params?: Params; // Arguments by either name or position\n};\n\nexport type JsonResponse<Result extends JsonValue = JsonValue> = JsonRPC & {\n  id: string | number;\n} & ({ result: Result } | { error: JsonError });\n\nexport type JsonResponseResult<T extends JsonResponse> = T extends {\n  result: infer S;\n}\n  ? S\n  : never;\n\nexport interface Connection {\n  connected: boolean;\n\n  addEventListener(event: \"disconnect\", listener: () => void): () => void;\n\n  connect(): Promise<void>;\n\n  disconnect(): Promise<void>;\n}\n\nexport interface Channel {\n  closed: boolean;\n\n  addEventListener(event: \"close\", listener: () => void): () => void;\n\n  addEventListener(\n    event: \"response\",\n    listener: (response: JsonResponse) => void,\n  ): () => void;\n\n  send(requests: JsonRequest): Promise<void>;\n\n  close(): Promise<void>;\n}\n\nexport interface Transport {\n  connection?: Connection;\n\n  establishChannel(): Promise<Channel>;\n}\n\nexport const isJsonRpcMessage = (message: unknown): message is JsonRPC =>\n  typeof message === \"object\" &&\n  !!message &&\n  \"jsonrpc\" in message &&\n  message.jsonrpc === \"2.0\";\n\nexport const isJsonRpcRequest = (message: unknown): message is JsonRequest =>\n  isJsonRpcMessage(message) &&\n  \"method\" in message &&\n  typeof message.method === \"string\";\n\nexport const isJsonRpcResponse = (message: unknown): message is JsonResponse =>\n  isJsonRpcMessage(message) &&\n  \"id\" in message &&\n  (typeof message.id === \"string\" || typeof message.id === \"number\");\n", "import {\n  type Agent,\n  type ApiQueryResponse,\n  Certificate,\n  compare,\n  HttpAgent,\n  IC_ROOT_KEY,\n  type Identity,\n  lookupResultToBuffer,\n  LookupStatus,\n  type QueryFields,\n  type QueryResponseStatus,\n  type ReadStateOptions,\n  type ReadStateResponse,\n  type RequestId,\n  requestIdOf,\n  SubmitRequestType,\n  type SubmitResponse,\n} from \"@dfinity/agent\";\nimport { type JsonObject, lebDecode, PipeArrayBuffer } from \"@dfinity/candid\";\nimport { Principal } from \"@dfinity/principal\";\nimport { type Signer, toBase64 } from \"@slide-computer/signer\";\nimport { decodeCallRequest } from \"./utils\";\nimport { Queue } from \"./queue\";\n\nconst ROOT_KEY = new Uint8Array(\n  IC_ROOT_KEY.match(/[\\da-f]{2}/gi)!.map((h) => parseInt(h, 16)),\n).buffer;\nconst MAX_AGE_IN_MINUTES = 5;\nconst INVALID_RESPONSE_MESSAGE = \"Received invalid response from signer\";\n\nexport interface SignerAgentOptions<T extends Pick<Signer, \"callCanister\">> {\n  /**\n   * Signer instance that should be used to send ICRC-25 JSON-RPC messages\n   */\n  signer: T;\n  /**\n   * Principal of account that should be used to make calls\n   */\n  account: Principal;\n  /**\n   * Optional, used to fetch root key\n   * @default uses {@link HttpAgent} by default\n   */\n  agent?: HttpAgent;\n  /**\n   * Optional, delay in milliseconds used to detect parallel calls and turn them into a single batch call\n   * @default 20\n   */\n  scheduleDelay?: number;\n  /**\n   * Optional, validation used with batch call canister\n   * @default null\n   */\n  validation?: { canisterId: Principal; method: string } | null;\n}\n\nexport class SignerAgentError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, SignerAgentError.prototype);\n  }\n}\n\ninterface ScheduledCall {\n  options: {\n    canisterId: Principal;\n    method: string;\n    arg: ArrayBuffer;\n  };\n  resolve: (response: {\n    contentMap: ArrayBuffer;\n    certificate: ArrayBuffer;\n  }) => void;\n  reject: (error: unknown) => void;\n}\n\ninterface Validation {\n  canisterId: Principal;\n  method: string;\n}\n\nexport class SignerAgent<\n  T extends Pick<\n    Signer,\n    \"callCanister\" | \"openChannel\" | \"supportedStandards\" | \"batchCallCanister\"\n  > = Signer,\n> implements Agent\n{\n  // noinspection JSUnusedLocalSymbols\n  static #isInternalConstructing: boolean = false;\n  readonly #options: Required<SignerAgentOptions<T>>;\n  readonly #certificates = new Map<string, ArrayBuffer>();\n  readonly #queue = new Queue();\n  #executeTimeout?: ReturnType<typeof setTimeout>;\n  #scheduled: ScheduledCall[][] = [[]];\n  #autoBatch: boolean = true;\n  #validation?: Validation;\n\n  private constructor(options: Required<SignerAgentOptions<T>>) {\n    const throwError = !SignerAgent.#isInternalConstructing;\n    SignerAgent.#isInternalConstructing = false;\n    if (throwError) {\n      throw new SignerAgentError(\"SignerAgent is not constructable\");\n    }\n    this.#options = options;\n  }\n\n  get rootKey() {\n    return this.#options.agent.rootKey ?? ROOT_KEY;\n  }\n\n  get signer(): T {\n    return this.#options.signer;\n  }\n\n  static async create<\n    T extends Pick<\n      Signer,\n      | \"callCanister\"\n      | \"openChannel\"\n      | \"supportedStandards\"\n      | \"batchCallCanister\"\n    >,\n  >(options: SignerAgentOptions<T>) {\n    SignerAgent.#isInternalConstructing = true;\n    return new SignerAgent<T>({\n      ...options,\n      agent: options.agent ?? (await HttpAgent.create()),\n      scheduleDelay: options.scheduleDelay ?? 20,\n      validation: options.validation ?? null,\n    });\n  }\n\n  static createSync<\n    T extends Pick<\n      Signer,\n      | \"callCanister\"\n      | \"openChannel\"\n      | \"supportedStandards\"\n      | \"batchCallCanister\"\n    >,\n  >(options: SignerAgentOptions<T>) {\n    SignerAgent.#isInternalConstructing = true;\n    return new SignerAgent<T>({\n      ...options,\n      agent: options.agent ?? HttpAgent.createSync(),\n      scheduleDelay: options.scheduleDelay ?? 20,\n      validation: options.validation ?? null,\n    });\n  }\n\n  async execute() {\n    const scheduled = [...this.#scheduled];\n    const validation = this.#validation;\n    this.clear();\n\n    const pending = scheduled.flat().length;\n    if (pending === 0) {\n      this.#validation = undefined;\n      return;\n    }\n\n    const needsBatch = pending > 1;\n    if (!needsBatch) {\n      await this.#executeQueue(scheduled);\n      return;\n    }\n\n    const supportedStandards = await this.#queue.schedule(() =>\n      this.signer.supportedStandards(),\n    );\n    const supportsBatch = supportedStandards.some(\n      (supportedStandard) => supportedStandard.name === \"ICRC-112\",\n    );\n    if (supportsBatch) {\n      await this.#executeBatch(scheduled, validation);\n    } else {\n      await this.#executeQueue(scheduled);\n    }\n  }\n\n  async #executeQueue(scheduled: ScheduledCall[][]): Promise<void> {\n    await Promise.all(\n      scheduled.flat().map(({ options, resolve, reject }) =>\n        this.#queue.schedule(async () => {\n          try {\n            const response = await this.signer.callCanister({\n              sender: this.#options.account,\n              ...options,\n            });\n            resolve(response);\n          } catch (error) {\n            reject(error);\n          }\n        }),\n      ),\n    );\n  }\n\n  async #executeBatch(\n    scheduled: ScheduledCall[][],\n    validation?: Validation,\n  ): Promise<void> {\n    await this.#queue.schedule(async () => {\n      try {\n        const responses = await this.signer.batchCallCanister({\n          sender: this.#options.account,\n          requests: scheduled.map((entries) =>\n            entries.map(({ options }) => options),\n          ),\n          validation: validation ?? undefined,\n        });\n        scheduled.forEach((entries, sequenceIndex) =>\n          entries.forEach(({ resolve, reject }, requestIndex) => {\n            const response = responses[sequenceIndex][requestIndex];\n            if (\"result\" in response) {\n              resolve(response.result);\n              return;\n            }\n            if (\"error\" in response) {\n              reject(\n                new SignerAgentError(\n                  `${response.error.code}: ${response.error.message}\\n${JSON.stringify(response.error.data)}`,\n                ),\n              );\n              return;\n            }\n            reject(new SignerAgentError(INVALID_RESPONSE_MESSAGE));\n          }),\n        );\n      } catch (error) {\n        // Forward error to each canister call handler\n        scheduled.flat().forEach(({ reject }) => reject(error));\n      }\n    });\n  }\n\n  async call(\n    canisterId: Principal | string,\n    options: {\n      methodName: string;\n      arg: ArrayBuffer;\n      effectiveCanisterId?: Principal | string;\n    },\n  ): Promise<SubmitResponse> {\n    // Make sure canisterId is a principal\n    canisterId = Principal.from(canisterId);\n\n    // Manually open the transport channel here first to make sure that\n    // the scheduler does not e.g. block a popup window from opening.\n    await this.#options.signer.openChannel();\n\n    // Make call through scheduler that automatically performs a single call or batch call.\n    const response = await new Promise<\n      Awaited<ReturnType<Signer[\"callCanister\"]>>\n    >((resolve, reject) => {\n      clearTimeout(this.#executeTimeout);\n      this.#scheduled.slice(-1)[0].push({\n        options: {\n          canisterId,\n          method: options.methodName,\n          arg: options.arg,\n        },\n        resolve,\n        reject,\n      });\n      if (this.#autoBatch) {\n        this.#executeTimeout = setTimeout(\n          () => this.execute(),\n          this.#options.scheduleDelay,\n        );\n      }\n    });\n\n    // Validate content map\n    const requestBody = decodeCallRequest(response.contentMap);\n    const contentMapMatchesRequest =\n      SubmitRequestType.Call === requestBody.request_type &&\n      canisterId.compareTo(requestBody.canister_id) === \"eq\" &&\n      options.methodName === requestBody.method_name &&\n      compare(options.arg, requestBody.arg) === 0 &&\n      this.#options.account.compareTo(Principal.from(requestBody.sender)) ===\n        \"eq\";\n    if (!contentMapMatchesRequest) {\n      throw new SignerAgentError(INVALID_RESPONSE_MESSAGE);\n    }\n\n    // Validate certificate\n    const requestId = requestIdOf(requestBody);\n    const certificate = await Certificate.create({\n      certificate: response.certificate,\n      rootKey: this.rootKey,\n      canisterId,\n      maxAgeInMinutes: MAX_AGE_IN_MINUTES,\n    }).catch(() => {\n      throw new SignerAgentError(INVALID_RESPONSE_MESSAGE);\n    });\n    const certificateIsResponseToContentMap =\n      certificate.lookup([\"request_status\", requestId, \"status\"]).status ===\n      LookupStatus.Found;\n    if (!certificateIsResponseToContentMap) {\n      throw new SignerAgentError(INVALID_RESPONSE_MESSAGE);\n    }\n\n    // Check if response has already been received previously to avoid replay attacks\n    const requestKey = toBase64(requestId);\n    if (this.#certificates.has(requestKey)) {\n      throw new SignerAgentError(INVALID_RESPONSE_MESSAGE);\n    }\n\n    // Store certificate in map\n    this.#certificates.set(requestKey, response.certificate);\n\n    // Cleanup when certificate expires\n    const now = Date.now();\n    const lookupTime = lookupResultToBuffer(certificate.lookup([\"time\"]));\n    if (!lookupTime) {\n      throw new SignerAgentError(INVALID_RESPONSE_MESSAGE);\n    }\n    const certificateTime =\n      Number(lebDecode(new PipeArrayBuffer(lookupTime))) / 1_000_000;\n    const expiry = certificateTime - now + MAX_AGE_IN_MINUTES * 60 * 1000;\n    setTimeout(() => this.#certificates.delete(requestKey), expiry);\n\n    // Return request id with http response\n    return {\n      requestId,\n      response: {\n        ok: true,\n        status: 202,\n        statusText: \"Call has been sent over ICRC-25 JSON-RPC\",\n        body: null,\n        headers: [],\n      },\n    };\n  }\n\n  async fetchRootKey(): Promise<ArrayBuffer> {\n    return this.#options.agent.fetchRootKey();\n  }\n\n  async getPrincipal(): Promise<Principal> {\n    return this.#options.account;\n  }\n\n  async query(\n    canisterId: Principal | string,\n    options: QueryFields,\n  ): Promise<ApiQueryResponse> {\n    // Make sure canisterId is a principal\n    canisterId = Principal.from(canisterId);\n\n    // Upgrade query request to a call sent through signer\n    const submitResponse = await this.call(canisterId, options);\n    const readStateResponse = await this.readState(canisterId, {\n      paths: [\n        [new TextEncoder().encode(\"request_status\"), submitResponse.requestId],\n      ],\n    });\n    const certificate = await Certificate.create({\n      certificate: readStateResponse.certificate,\n      rootKey: this.rootKey,\n      canisterId,\n    });\n    const status = certificate.lookup([\n      \"request_status\",\n      submitResponse.requestId,\n      \"status\",\n    ]);\n    const reply = certificate.lookup([\n      \"request_status\",\n      submitResponse.requestId,\n      \"reply\",\n    ]);\n    if (\n      status.status !== LookupStatus.Found ||\n      new TextDecoder().decode(status.value as ArrayBuffer) !== \"replied\" ||\n      reply.status !== LookupStatus.Found\n    ) {\n      throw new SignerAgentError(\"Certificate is missing reply\");\n    }\n    return {\n      requestId: submitResponse.requestId,\n      status: \"replied\" as QueryResponseStatus.Replied,\n      reply: {\n        arg: reply.value as ArrayBuffer,\n      },\n      httpDetails: {\n        ok: true,\n        status: 202,\n        statusText:\n          \"Certificate with reply has been received over ICRC-25 JSON-RPC\",\n        headers: [],\n      },\n    };\n  }\n\n  async createReadStateRequest(\n    _options: ReadStateOptions,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    // Since request is typed as any it shouldn't need any data,\n    // but since agent-js 2.1.3 this would cause a runtime error.\n    return {\n      body: {\n        content: {},\n      },\n    };\n  }\n\n  async readState(\n    _canisterId: Principal | string,\n    options: ReadStateOptions,\n    _identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _request?: any,\n  ): Promise<ReadStateResponse> {\n    if (\n      options.paths.length !== 1 ||\n      options.paths[0].length !== 2 ||\n      new TextDecoder().decode(options.paths[0][0]) !== \"request_status\"\n    ) {\n      throw new SignerAgentError(\"Given paths are not supported\");\n    }\n    const requestId = options.paths[0][1] as RequestId;\n    const key = toBase64(requestId);\n    const certificate = this.#certificates.get(key);\n    if (!certificate) {\n      throw new SignerAgentError(\"Certificate could not be found\");\n    }\n    return { certificate };\n  }\n\n  async status(): Promise<JsonObject> {\n    return this.#options.agent.status();\n  }\n\n  replaceAccount(account: Principal) {\n    this.#options.account = account;\n  }\n\n  replaceValidation(validation?: { canisterId: Principal; method: string }) {\n    this.#validation = validation;\n  }\n\n  /**\n   * Enable manual triggering of canister calls execution\n   */\n  batch() {\n    this.#autoBatch = false;\n    if (this.#scheduled.slice(-1)[0].length > 0) {\n      this.#scheduled.push([]);\n    }\n  }\n\n  /**\n   * Clear scheduled canister calls and switch back to automatic canister calls execution\n   */\n  clear() {\n    this.#scheduled = [[]];\n    this.#autoBatch = true;\n  }\n}\n", "import {\n  type CallRequest,\n  Cbor,\n  Expiry,\n  type SubmitRequestType,\n} from \"@dfinity/agent\";\nimport { Principal } from \"@dfinity/principal\";\nimport { BigNumber } from \"bignumber.js\";\n\ntype DecodedCallRequest = Record<string, any> & {\n  request_type: SubmitRequestType.Call;\n  canister_id: Uint8Array;\n  method_name: string;\n  arg: Uint8Array;\n  sender: Uint8Array;\n  ingress_expiry: BigNumber;\n};\n\nexport const decodeCallRequest = (contentMap: ArrayBuffer): CallRequest => {\n  const decoded = Cbor.decode<DecodedCallRequest>(contentMap);\n  const expiry = new Expiry(0);\n  // @ts-ignore Expiry class currently has no method to create instance from value\n  expiry._value = BigInt(decoded.ingress_expiry.toString(10));\n  return {\n    ...decoded,\n    canister_id: Principal.from(decoded.canister_id),\n    ingress_expiry: expiry,\n  };\n};\n", "/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n", "export class Queue {\n  #ongoing: Promise<void> = Promise.resolve();\n\n  async schedule<T>(job: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.#ongoing = this.#ongoing.finally(async () => {\n        try {\n          resolve(await job());\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n}\n", "function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    let dbp;\n    const getDB = () => {\n        if (dbp)\n            return dbp;\n        const request = indexedDB.open(dbName);\n        request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n        dbp = promisifyRequest(request);\n        dbp.then((db) => {\n            // It seems like Safari sometimes likes to just close the connection.\n            // It's supposed to fire this event when that happens. Let's hope it does!\n            db.onclose = () => (dbp = undefined);\n        }, () => { });\n        return dbp;\n    };\n    return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic – if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n", "import { createStore, del, get, set, type UseStore } from \"idb-keyval\";\n\nexport type StoredKey = string | CryptoKeyPair;\n\n/**\n * Interface for persisting user identity and delegation data\n */\nexport interface SignerStorage {\n  get(key: string): Promise<StoredKey | undefined>;\n\n  set(key: string, value: StoredKey): Promise<void>;\n\n  remove(key: string): Promise<void>;\n}\n\n/**\n * Legacy implementation of SignerStorage, for use where IndexedDb is not available\n */\nexport class LocalStorage implements SignerStorage {\n  constructor(\n    public readonly prefix = \"signer-\",\n    private readonly _localStorage?: Storage,\n  ) {}\n\n  public async get(key: string) {\n    return this._getLocalStorage().getItem(this.prefix + key) ?? undefined;\n  }\n\n  public async set(key: string, value: StoredKey) {\n    if (typeof value !== \"string\") {\n      throw Error(\"Use IdbStorage to store a `ECDSAKeyIdentity`.\");\n    }\n    this._getLocalStorage().setItem(this.prefix + key, value);\n  }\n\n  public async remove(key: string) {\n    this._getLocalStorage().removeItem(this.prefix + key);\n  }\n\n  private _getLocalStorage(): Storage {\n    if (this._localStorage) {\n      return this._localStorage;\n    }\n\n    const ls =\n      typeof window === \"undefined\"\n        ? // @ts-ignore\n          typeof global === \"undefined\"\n          ? typeof self === \"undefined\"\n            ? undefined\n            : self.localStorage\n          : // @ts-ignore\n            global.localStorage\n        : window.localStorage;\n\n    if (!ls) {\n      throw new Error(\"Could not find local storage.\");\n    }\n\n    return ls;\n  }\n}\n\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on idb-keyval\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link SignerStorage}\n */\nexport class IdbStorage implements SignerStorage {\n  private _store?: UseStore;\n\n  get store() {\n    if (!this._store) {\n      this._store = createStore(\"signer-db\", \"signer-store\");\n    }\n    return this._store;\n  }\n\n  public async get(key: string) {\n    return get<StoredKey>(key, this.store);\n  }\n\n  public async set(key: string, value: StoredKey) {\n    return set(key, value, this.store);\n  }\n\n  public async remove(key: string) {\n    return del(key, this.store);\n  }\n}\n", "import { ECDSAKeyIdentity, Ed25519KeyIdentity } from \"@dfinity/identity\";\nimport type { SignerStorage } from \"./storage\";\n\nexport const getIdentity = async (key: string, storage: SignerStorage) => {\n  const value = await storage.get(`identity-${key}`);\n  if (!value) {\n    return;\n  }\n  return typeof value === \"string\"\n    ? Ed25519KeyIdentity.fromJSON(value)\n    : ECDSAKeyIdentity.fromKeyPair(value);\n};\n\nexport const setIdentity = async (\n  key: string,\n  identity: Ed25519KeyIdentity | ECDSAKeyIdentity,\n  storage: SignerStorage,\n) => {\n  const value =\n    identity instanceof Ed25519KeyIdentity\n      ? JSON.stringify(identity.toJSON())\n      : identity.getKeyPair();\n  return storage.set(`identity-${key}`, value);\n};\n\nexport const removeIdentity = async (key: string, storage: SignerStorage) => {\n  return storage.remove(`identity-${key}`);\n};\n", "import { DelegationChain } from \"@dfinity/identity\";\nimport type { SignerStorage } from \"./storage\";\n\nexport const getDelegationChain = async (\n  key: string,\n  storage: SignerStorage,\n) => {\n  const json = await storage.get(`delegation-${key}`);\n  if (!json || typeof json !== \"string\") {\n    return;\n  }\n  return DelegationChain.fromJSON(json);\n};\n\nexport const setDelegationChain = async (\n  key: string,\n  delegationChain: DelegationChain,\n  storage: SignerStorage,\n) => {\n  return storage.set(\n    `delegation-${key}`,\n    JSON.stringify(delegationChain.toJSON()),\n  );\n};\n\nexport const removeDelegationChain = async (\n  key: string,\n  storage: SignerStorage,\n) => {\n  return storage.remove(`delegation-${key}`);\n};\n", "export enum FromStringToTokenError {\n  FractionalMoreThan8Decimals,\n  InvalidFormat,\n  FractionalTooManyDecimals,\n}\n", "export const E8S_PER_TOKEN = BigInt(100000000);\n", "import { E8S_PER_TOKEN } from \"../constants/constants\";\nimport { FromStringToTokenError } from \"../enums/token.enums\";\n\nconst DECIMALS_CONVERSION_SUPPORTED = 8;\n\n/**\n * Receives a string representing a number and returns the big int or error.\n *\n * @param amount - in string format\n * @returns bigint | FromStringToTokenError\n */\nexport const convertStringToE8s = (\n  value: string,\n): bigint | FromStringToTokenError => {\n  // replace exponential format (1e-4) with plain (0.0001)\n  // doesn't support decimals for values >= ~1e16\n  let amount = value.includes(\"e\")\n    ? Number(value).toLocaleString(\"en\", {\n        useGrouping: false,\n        maximumFractionDigits: 20,\n      })\n    : value;\n\n  // Remove all instances of \",\" and \"'\".\n  amount = amount.trim().replace(/[,']/g, \"\");\n\n  // Verify that the string is of the format 1234.5678\n  const regexMatch = amount.match(/\\d*(\\.\\d*)?/);\n  if (!regexMatch || regexMatch[0] !== amount) {\n    return FromStringToTokenError.InvalidFormat;\n  }\n\n  const [integral, fractional] = amount.split(\".\");\n\n  let e8s = BigInt(0);\n\n  if (integral) {\n    try {\n      e8s += BigInt(integral) * E8S_PER_TOKEN;\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  if (fractional) {\n    if (fractional.length > 8) {\n      return FromStringToTokenError.FractionalMoreThan8Decimals;\n    }\n    try {\n      e8s += BigInt(fractional.padEnd(8, \"0\"));\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  return e8s;\n};\n\n/**\n * Receives a string representing a number and returns the big int or error.\n *\n * @param amount - in string format\n * @returns bigint | FromStringToTokenError\n */\nconst convertStringToUlps = ({\n  amount,\n  decimals,\n}: {\n  amount: string;\n  decimals: number;\n}): bigint | FromStringToTokenError => {\n  // Remove all instances of \",\" and \"'\".\n  amount = amount.trim().replace(/[,']/g, \"\");\n\n  // Verify that the string is of the format 1234.5678\n  const regexMatch = amount.match(/\\d*(\\.\\d*)?/);\n  if (!regexMatch || regexMatch[0] !== amount) {\n    return FromStringToTokenError.InvalidFormat;\n  }\n\n  const [integral, fractional] = amount.split(\".\");\n\n  let ulps = 0n;\n  const ulpsPerToken = 10n ** BigInt(decimals);\n\n  if (integral) {\n    try {\n      ulps += BigInt(integral) * ulpsPerToken;\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  if (fractional) {\n    if (fractional.length > decimals) {\n      return FromStringToTokenError.FractionalTooManyDecimals;\n    }\n    try {\n      ulps += BigInt(fractional.padEnd(decimals, \"0\"));\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  return ulps;\n};\n\nexport interface Token {\n  symbol: string;\n  name: string;\n  decimals: number;\n  logo?: string;\n}\n\n// TODO: Remove this token and use the value from ICP ledger\nexport const ICPToken: Token = {\n  symbol: \"ICP\",\n  name: \"Internet Computer\",\n  decimals: 8,\n};\n\n/**\n * Deprecated. Use TokenAmountV2 instead which supports decimals !== 8.\n *\n * Represents an amount of tokens.\n *\n * @param e8s - The amount of tokens in bigint.\n * @param token - The token type.\n */\nexport class TokenAmount {\n  private constructor(\n    protected e8s: bigint,\n    public token: Token,\n  ) {\n    if (token.decimals !== 8) {\n      throw new Error(\"Use TokenAmountV2 for number of decimals other than 8\");\n    }\n  }\n\n  /**\n   * Initialize from a bigint. Bigint are considered e8s.\n   *\n   * @param {amount: bigint; token?: Token;} params\n   * @param {bigint} params.amount The amount in bigint format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromE8s({\n    amount,\n    token,\n  }: {\n    amount: bigint;\n    token: Token;\n  }): TokenAmount {\n    return new TokenAmount(amount, token);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   *\n   * @param {amount: string; token?: Token;} params\n   * @param {string} params.amount The amount in string format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromString({\n    amount,\n    token,\n  }: {\n    amount: string;\n    token: Token;\n  }): TokenAmount | FromStringToTokenError {\n    // If parsing the number fails because of the number of decimals, we still\n    // want the error to be about the number of decimals and not about the\n    // parsing.\n    if (token.decimals !== 8) {\n      throw new Error(\"Use TokenAmountV2 for number of decimals other than 8\");\n    }\n    const e8s = convertStringToE8s(amount);\n\n    if (typeof e8s === \"bigint\") {\n      return new TokenAmount(e8s, token);\n    }\n    return e8s;\n  }\n\n  /**\n   * Initialize from a number.\n   *\n   * 1 integer is considered E8S_PER_TOKEN\n   *\n   * @param {amount: number; token?: Token;} params\n   * @param {string} params.amount The amount in number format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromNumber({\n    amount,\n    token,\n  }: {\n    amount: number;\n    token: Token;\n  }): TokenAmount {\n    const tokenAmount = TokenAmount.fromString({\n      amount: amount.toString(),\n      token,\n    });\n    if (tokenAmount instanceof TokenAmount) {\n      return tokenAmount;\n    }\n    if (tokenAmount === FromStringToTokenError.FractionalMoreThan8Decimals) {\n      throw new Error(`Number ${amount} has more than 8 decimals`);\n    }\n\n    // This should never happen\n    throw new Error(`Invalid number ${amount}`);\n  }\n\n  /**\n   *\n   * @returns The amount of e8s.\n   */\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n}\n\n/**\n * Represents an amount of tokens.\n *\n * @param upls - The amount of tokens in units in the last place. If the token\n *               supports N decimals, 10^N ulp = 1 token.\n * @param token - The token type.\n */\nexport class TokenAmountV2 {\n  private constructor(\n    protected ulps: bigint,\n    public token: Token,\n  ) {}\n\n  /**\n   * Initialize from a bigint. Bigint are considered ulps.\n   *\n   * @param {amount: bigint; token?: Token;} params\n   * @param {bigint} params.amount The amount in bigint format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromUlps({\n    amount,\n    token,\n  }: {\n    amount: bigint;\n    token: Token;\n  }): TokenAmountV2 {\n    return new TokenAmountV2(amount, token);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   *\n   * @param {amount: string; token?: Token;} params\n   * @param {string} params.amount The amount in string format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromString({\n    amount,\n    token,\n  }: {\n    amount: string;\n    token: Token;\n  }): TokenAmountV2 | FromStringToTokenError {\n    const ulps = convertStringToUlps({ amount, decimals: token.decimals });\n\n    if (typeof ulps === \"bigint\") {\n      return new TokenAmountV2(ulps, token);\n    }\n    return ulps;\n  }\n\n  /**\n   * Initialize from a number.\n   *\n   * 1 integer is considered 10^{token.decimals} ulps\n   *\n   * @param {amount: number; token?: Token;} params\n   * @param {string} params.amount The amount in number format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromNumber({\n    amount,\n    token,\n  }: {\n    amount: number;\n    token: Token;\n  }): TokenAmountV2 {\n    const tokenAmount = TokenAmountV2.fromString({\n      amount: amount.toFixed(\n        Math.min(DECIMALS_CONVERSION_SUPPORTED, token.decimals),\n      ),\n      token,\n    });\n    if (tokenAmount instanceof TokenAmountV2) {\n      return tokenAmount;\n    }\n    if (tokenAmount === FromStringToTokenError.FractionalTooManyDecimals) {\n      throw new Error(\n        `Number ${amount} has more than ${token.decimals} decimals`,\n      );\n    }\n\n    // This should never happen\n    throw new Error(`Invalid number ${amount}`);\n  }\n\n  /**\n   *\n   * @returns The amount of ulps.\n   */\n  public toUlps(): bigint {\n    return this.ulps;\n  }\n\n  /**\n   *\n   * @returns The amount of ulps in e8s precision\n   */\n  public toE8s(): bigint {\n    if (this.token.decimals < 8) {\n      return this.ulps * 10n ** BigInt(8 - this.token.decimals);\n    } else if (this.token.decimals === 8) {\n      return this.ulps;\n    } else {\n      return this.ulps / 10n ** BigInt(this.token.decimals - 8);\n    }\n  }\n}\n", "import type { Principal } from \"@dfinity/principal\";\nimport type { QueryParams } from \"../types/query.params\";\n\nexport abstract class Canister<T> {\n  protected constructor(\n    private readonly id: Principal,\n    protected readonly service: T,\n    protected readonly certifiedService: T,\n  ) {}\n\n  get canisterId(): Principal {\n    return this.id;\n  }\n\n  protected caller = ({ certified = true }: QueryParams): T =>\n    certified ? this.certifiedService : this.service;\n}\n", "import type { ActorConfig, ActorSubclass, Agent } from \"@dfinity/agent\";\nimport { Actor } from \"@dfinity/agent\";\nimport type { IDL } from \"@dfinity/candid\";\nimport type { Principal } from \"@dfinity/principal\";\nimport type { CanisterOptions } from \"../types/canister.options\";\nimport { defaultAgent } from \"./agent.utils\";\n\ntype RequiredCanisterOptions<T> = Required<\n  Pick<CanisterOptions<T>, \"canisterId\">\n> &\n  Omit<CanisterOptions<T>, \"canisterId\">;\n\nexport const createServices = <T>({\n  options: {\n    canisterId,\n    serviceOverride,\n    certifiedServiceOverride,\n    agent: agentOption,\n    callTransform,\n    queryTransform,\n  },\n  idlFactory,\n  certifiedIdlFactory,\n}: {\n  options: RequiredCanisterOptions<T> &\n    Pick<ActorConfig, \"queryTransform\" | \"callTransform\">;\n  idlFactory: IDL.InterfaceFactory;\n  certifiedIdlFactory: IDL.InterfaceFactory;\n}): {\n  service: ActorSubclass<T>;\n  certifiedService: ActorSubclass<T>;\n  agent: Agent;\n  canisterId: Principal;\n} => {\n  const agent: Agent = agentOption ?? defaultAgent();\n\n  const service: ActorSubclass<T> =\n    serviceOverride ??\n    Actor.createActor<T>(idlFactory, {\n      agent,\n      canisterId,\n      callTransform,\n      queryTransform,\n    });\n\n  const certifiedService: ActorSubclass<T> =\n    certifiedServiceOverride ??\n    Actor.createActor<T>(certifiedIdlFactory, {\n      agent,\n      canisterId,\n      callTransform,\n      queryTransform,\n    });\n\n  return { service, certifiedService, agent, canisterId };\n};\n", "import type { Agent, Identity } from \"@dfinity/agent\";\nimport { AnonymousIdentity, HttpAgent } from \"@dfinity/agent\";\nimport type { CreateAgentParams } from \"../types/agent.utils\";\nimport { isNullish, nonNullish } from \"./nullish.utils\";\n\n/**\n * Get a default agent that connects to mainnet with the anonymous identity.\n * @returns The default agent to use\n */\nexport const defaultAgent = (): Agent =>\n  HttpAgent.createSync({\n    host: \"https://icp-api.io\",\n    identity: new AnonymousIdentity(),\n  });\n\n/**\n * Create an agent for a given identity\n *\n * @param {CreateAgentParams} params The parameters to create a new HTTP agent\n * @param {Identity} params.identity A mandatory identity to use for the agent\n * @param {string} params.host An optional host to connect to, particularly useful for local development\n * @param {boolean} params.fetchRootKey Fetch root key for certificate validation during local development or on testnet\n * @param {boolean} params.verifyQuerySignatures Check for signatures in the state tree signed by the node that replies to queries - i.e. certify responses.\n * @param {number} params.retryTimes Set the number of retries the agent should perform before error.\n */\nexport const createAgent = async ({\n  identity,\n  host,\n  fetchRootKey = false,\n  verifyQuerySignatures = false,\n  retryTimes,\n}: CreateAgentParams): Promise<HttpAgent> => {\n  return await HttpAgent.create({\n    identity,\n    ...(nonNullish(host) && { host }),\n    verifyQuerySignatures,\n    ...(nonNullish(retryTimes) && { retryTimes }),\n    shouldFetchRootKey: fetchRootKey,\n  });\n};\n\nexport type AgentManagerConfig = Pick<\n  CreateAgentParams,\n  \"fetchRootKey\" | \"host\"\n>;\n\n/**\n * AgentManager class manages HttpAgent instances for different identities.\n *\n * It caches agents by identity to optimise resource usage and avoid unnecessary agent creation.\n * Provides functionality to create new agents, retrieve cached agents, and clear the cache when needed.\n */\nexport class AgentManager {\n  private agents: Record<string, HttpAgent> | undefined | null = undefined;\n\n  private constructor(private readonly config: AgentManagerConfig) {}\n\n  /**\n   * Static factory method to create a new AgentManager instance.\n   *\n   * This method serves as an alternative to directly using the private constructor,\n   * making it more convenient to create instances of `AgentManager` using a simple and clear method.\n   *\n   * @param {AgentManagerConfig} config - Configuration options for the AgentManager instance.\n   * @param {boolean} config.fetchRootKey - Whether to fetch the root key for certificate validation.\n   * @param {string} config.host - The host to connect to.\n   * @returns {AgentManager} A new instance of `AgentManager`.\n   */\n  public static create(config: AgentManagerConfig): AgentManager {\n    return new AgentManager(config);\n  }\n\n  /**\n   * Get or create an HTTP agent for a given identity.\n   *\n   * If the agent for the specified identity has been created and cached, it is retrieved from the cache.\n   * If no agent exists for the identity, a new one is created, cached, and then returned.\n   *\n   * @param {Identity} identity - The identity to be used to create the agent.\n   * @returns {Promise<HttpAgent>} The HttpAgent associated with the given identity.\n   */\n  public getAgent = async ({\n    identity,\n  }: {\n    identity: Identity;\n  }): Promise<HttpAgent> => {\n    const key = identity.getPrincipal().toText();\n\n    if (isNullish(this.agents) || isNullish(this.agents[key])) {\n      const agent = await createAgent({\n        identity,\n        fetchRootKey: this.config.fetchRootKey,\n        host: this.config.host,\n        verifyQuerySignatures: true,\n      });\n\n      this.agents = {\n        ...(this.agents ?? {}),\n        [key]: agent,\n      };\n\n      return agent;\n    }\n\n    return this.agents[key];\n  };\n\n  /**\n   * Clear the cache of HTTP agents.\n   *\n   * This method removes all cached agents, forcing new agent creation on the next request for any identity.\n   * Useful when identities have changed or if you want to reset all active connections.\n   */\n  public clearAgents = (): void => {\n    this.agents = null;\n  };\n}\n", "/**\n * Checks if a given argument is null or undefined.\n *\n * @template T - The type of the argument.\n * @param {T | undefined | null} argument - The argument to check.\n * @returns {argument is undefined | null} `true` if the argument is null or undefined; otherwise, `false`.\n */\nexport const isNullish = <T>(\n  argument: T | undefined | null,\n): argument is undefined | null => argument === null || argument === undefined;\n\n/**\n * Checks if a given argument is neither null nor undefined.\n *\n * @template T - The type of the argument.\n * @param {T | undefined | null} argument - The argument to check.\n * @returns {argument is NonNullable<T>} `true` if the argument is not null or undefined; otherwise, `false`.\n */\nexport const nonNullish = <T>(\n  argument: T | undefined | null,\n): argument is NonNullable<T> => !isNullish(argument);\n\n/**\n * Checks if a given value is not null, not undefined, and not an empty string.\n *\n * @param {string | undefined | null} value - The value to check.\n * @returns {boolean} `true` if the value is not null, not undefined, and not an empty string; otherwise, `false`.\n */\nexport const notEmptyString = (value: string | undefined | null): boolean =>\n  nonNullish(value) && value !== \"\";\n\n/**\n * Checks if a given value is null, undefined, or an empty string.\n *\n * @param {string | undefined | null} value - The value to check.\n * @returns {boolean} `true` if the value is null, undefined, or an empty string; otherwise, `false`.\n */\nexport const isEmptyString = (value: string | undefined | null): boolean =>\n  !notEmptyString(value);\n", "export class InvalidPercentageError extends Error {}\nexport class NullishError extends Error {}\n\nexport const assertNonNullish: <T>(\n  value: T,\n  message?: string,\n) => asserts value is NonNullable<T> = <T>(\n  value: T,\n  message?: string,\n): void => {\n  if (value === null || value === undefined) {\n    throw new NullishError(message);\n  }\n};\n\nexport const asNonNullish = <T>(value: T, message?: string): NonNullable<T> => {\n  assertNonNullish(value, message);\n  return value;\n};\n\nexport const assertPercentageNumber = (percentage: number) => {\n  if (percentage < 0 || percentage > 100) {\n    throw new InvalidPercentageError(\n      `${percentage} is not a valid percentage number.`,\n    );\n  }\n};\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nexport const uint8ArrayToBigInt = (array: Uint8Array): bigint => {\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  if (typeof view.getBigUint64 === \"function\") {\n    return view.getBigUint64(0);\n  } else {\n    const high = BigInt(view.getUint32(0));\n    const low = BigInt(view.getUint32(4));\n\n    return (high << BigInt(32)) + low;\n  }\n};\n\nexport const bigIntToUint8Array = (value: bigint): Uint8Array => {\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  if (typeof view.setBigUint64 === \"function\") {\n    view.setBigUint64(0, value);\n  } else {\n    const high = Number(value >> BigInt(32));\n    const low = Number(value & BigInt(0xffffffff));\n\n    view.setUint32(0, high);\n    view.setUint32(4, low);\n  }\n\n  return new Uint8Array(buffer);\n};\n\nexport const numberToUint8Array = (value: number): Uint8Array => {\n  const view = new DataView(new ArrayBuffer(8));\n  for (let index = 7; index >= 0; --index) {\n    view.setUint8(index, value % 256);\n    value = value >> 8;\n  }\n  return new Uint8Array(view.buffer);\n};\n\nexport const arrayBufferToUint8Array = (buffer: ArrayBuffer): Uint8Array =>\n  new Uint8Array(buffer);\n\nexport const uint8ArrayToArrayOfNumber = (array: Uint8Array): Array<number> =>\n  Array.from(array);\n\nexport const arrayOfNumberToUint8Array = (numbers: Array<number>): Uint8Array =>\n  new Uint8Array(numbers);\n\nexport const asciiStringToByteArray = (text: string): Array<number> =>\n  Array.from(text).map((c) => c.charCodeAt(0));\n\nexport const hexStringToUint8Array = (hexString: string): Uint8Array => {\n  const matches = hexString.match(/.{1,2}/g);\n\n  assertNonNullish(matches, \"Invalid hex string.\");\n\n  return Uint8Array.from(matches.map((byte) => parseInt(byte, 16)));\n};\n\nexport const uint8ArrayToHexString = (bytes: Uint8Array | number[]) => {\n  if (!(bytes instanceof Uint8Array)) {\n    bytes = Uint8Array.from(bytes);\n  }\n  return bytes.reduce(\n    (str, byte) => str + byte.toString(16).padStart(2, \"0\"),\n    \"\",\n  );\n};\n\nexport const candidNumberArrayToBigInt = (array: number[]): bigint => {\n  let result = 0n;\n  for (let i = array.length - 1; i >= 0; i--) {\n    result = (result << 32n) + BigInt(array[i]);\n  }\n  return result;\n};\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz234567\";\n\n// Build a lookup table for decoding.\nconst LOOKUP_TABLE: Record<string, number> = Object.create(null);\nfor (let i = 0; i < ALPHABET.length; i++) {\n  LOOKUP_TABLE[ALPHABET[i]] = i;\n}\n\n// Add aliases for rfc4648.\nLOOKUP_TABLE[\"0\"] = LOOKUP_TABLE.o;\nLOOKUP_TABLE[\"1\"] = LOOKUP_TABLE.i;\n\n/**\n * Encode an Uint8Array to a base32 string.\n *\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nexport const encodeBase32 = (input: Uint8Array): string => {\n  // How many bits will we skip from the first byte.\n  let skip = 0;\n  // 5 high bits, carry from one byte to the next.\n  let bits = 0;\n\n  // The output string in base32.\n  let output = \"\";\n\n  function encodeByte(byte: number): number {\n    if (skip < 0) {\n      // we have a carry from the previous byte\n      bits |= byte >> -skip;\n    } else {\n      // no carry\n      bits = (byte << skip) & 248;\n    }\n\n    if (skip > 3) {\n      // Not enough data to produce a character, get us another one\n      skip -= 8;\n      return 1;\n    }\n\n    if (skip < 4) {\n      // produce a character\n      output += ALPHABET[bits >> 3];\n      skip += 5;\n    }\n\n    return 0;\n  }\n\n  for (let i = 0; i < input.length; ) {\n    i += encodeByte(input[i]);\n  }\n\n  return output + (skip < 0 ? ALPHABET[bits >> 3] : \"\");\n};\n\n/**\n * Decode a base32 string to Uint8Array.\n *\n * @param input The input string to decode.\n * @param input The base32 encoded string to decode.\n */\nexport function decodeBase32(input: string): Uint8Array {\n  // how many bits we have from the previous character.\n  let skip = 0;\n  // current byte we're producing.\n  let byte = 0;\n\n  const output = new Uint8Array(((input.length * 4) / 3) | 0);\n  let o = 0;\n\n  function decodeChar(char: string) {\n    // Consume a character from the stream, store\n    // the output in this.output. As before, better\n    // to use update().\n    let val = LOOKUP_TABLE[char.toLowerCase()];\n    assertNonNullish(val, `Invalid character: ${JSON.stringify(char)}`);\n\n    // move to the high bits\n    val <<= 3;\n    byte |= val >>> skip;\n    skip += 5;\n\n    if (skip >= 8) {\n      // We have enough bytes to produce an output\n      output[o++] = byte;\n      skip -= 8;\n\n      if (skip > 0) {\n        byte = (val << (5 - skip)) & 255;\n      } else {\n        byte = 0;\n      }\n    }\n  }\n\n  for (const c of input) {\n    decodeChar(c);\n  }\n\n  return output.slice(0, o);\n}\n", "/**\n * Converts a Uint8Array (binary data) to a base64 encoded string.\n *\n * @param {Uint8Array} uint8Array - The Uint8Array containing binary data to be encoded.\n * @returns {string} - The base64 encoded string representation of the binary data.\n */\nexport const uint8ArrayToBase64 = (uint8Array: Uint8Array): string =>\n  btoa(String.fromCharCode(...new Uint8Array(uint8Array)));\n\n/**\n * Converts a base64 encoded string to a Uint8Array (binary data).\n *\n * @param {string} base64String - The base64 encoded string to be decoded.\n * @returns {Uint8Array} - The Uint8Array representation of the decoded binary data.\n */\nexport const base64ToUint8Array = (base64String: string): Uint8Array =>\n  Uint8Array.from(atob(base64String), (c) => c.charCodeAt(0));\n", "// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable: Uint32Array = new Uint32Array([\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n  0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n  0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n  0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n  0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n  0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n  0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n  0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n  0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n  0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n  0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n  0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n  0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n  0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n  0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n  0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n  0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n  0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n  0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n  0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n  0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n  0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n  0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n  0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n  0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n  0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n  0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n\nconst crc32 = (bytes: Uint8Array): number => {\n  let crc = -1;\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    const t = (byte ^ crc) & 0xff;\n    crc = lookUpTable[t] ^ (crc >>> 8);\n  }\n\n  return (crc ^ -1) >>> 0;\n};\n\nexport const bigEndianCrc32 = (bytes: Uint8Array): Uint8Array => {\n  const checksumArrayBuf = new ArrayBuffer(4);\n  const view = new DataView(checksumArrayBuf);\n  view.setUint32(0, crc32(bytes), false);\n  return new Uint8Array(checksumArrayBuf);\n};\n", "const SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst DAYS_IN_NON_LEAP_YEAR = 365;\n\nexport interface I18nSecondsToDuration {\n  year: string;\n  year_plural: string;\n  month: string;\n  month_plural: string;\n  day: string;\n  day_plural: string;\n  hour: string;\n  hour_plural: string;\n  minute: string;\n  minute_plural: string;\n  second: string;\n  second_plural: string;\n}\n\nconst EN_TIME: I18nSecondsToDuration = {\n  year: \"year\",\n  year_plural: \"years\",\n  month: \"month\",\n  month_plural: \"months\",\n  day: \"day\",\n  day_plural: \"days\",\n  hour: \"hour\",\n  hour_plural: \"hours\",\n  minute: \"minute\",\n  minute_plural: \"minutes\",\n  second: \"second\",\n  second_plural: \"seconds\",\n};\n\n/**\n * Convert seconds to a human-readable duration, such as \"6 days, 10 hours.\"\n * @param {Object} options - The options object.\n * @param {bigint} options.seconds - The number of seconds to convert.\n * @param {I18nSecondsToDuration} [options.i18n] - The i18n object for customizing language and units. Defaults to English.\n * @returns {string} The human-readable duration string.\n */\nexport const secondsToDuration = ({\n  seconds,\n  i18n = EN_TIME,\n}: {\n  seconds: bigint;\n  i18n?: I18nSecondsToDuration;\n}): string => {\n  let minutes = seconds / BigInt(SECONDS_IN_MINUTE);\n\n  let hours = minutes / BigInt(MINUTES_IN_HOUR);\n  minutes -= hours * BigInt(MINUTES_IN_HOUR);\n\n  let days = hours / BigInt(HOURS_IN_DAY);\n  hours -= days * BigInt(HOURS_IN_DAY);\n\n  const years = fullYearsInDays(days);\n  days -= daysInYears(years);\n\n  const periods = [\n    createLabel(\"year\", years),\n    createLabel(\"day\", days),\n    createLabel(\"hour\", hours),\n    createLabel(\"minute\", minutes),\n    ...(seconds > BigInt(0) && seconds < BigInt(60)\n      ? [createLabel(\"second\", seconds)]\n      : []),\n  ];\n\n  return periods\n    .filter(({ amount }) => amount > 0)\n    .slice(0, 2)\n    .map(\n      (labelInfo) =>\n        `${labelInfo.amount} ${\n          labelInfo.amount === 1\n            ? i18n[labelInfo.labelKey]\n            : i18n[`${labelInfo.labelKey}_plural`]\n        }`,\n    )\n    .join(\", \");\n};\n\nconst fullYearsInDays = (days: bigint): bigint => {\n  // Use integer division.\n  let years = days / BigInt(DAYS_IN_NON_LEAP_YEAR);\n  while (daysInYears(years) > days) {\n    years--;\n  }\n  return years;\n};\n\nconst daysInYears = (years: bigint): bigint => {\n  // Use integer division.\n  const leapDays = years / BigInt(4);\n  return years * BigInt(DAYS_IN_NON_LEAP_YEAR) + leapDays;\n};\n\ntype LabelKey = \"year\" | \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\";\ntype LabelInfo = {\n  labelKey: LabelKey;\n  amount: number;\n};\nconst createLabel = (labelKey: LabelKey, amount: bigint): LabelInfo => ({\n  labelKey,\n  amount: Number(amount),\n});\n\nconst NANOSECONDS_PER_MILLISECOND = 1_000_000n;\n\n/**\n * Returns the current timestamp in nanoseconds as a `bigint`.\n *\n * @returns {bigint} The current timestamp in nanoseconds.\n */\nexport const nowInBigIntNanoSeconds = (): bigint =>\n  BigInt(Date.now()) * NANOSECONDS_PER_MILLISECOND;\n\n/**\n * Converts a given `Date` object to a timestamp in nanoseconds as a `bigint`.\n *\n * @param {Date} date - The `Date` object to convert.\n * @returns {bigint} The timestamp in nanoseconds.\n */\nexport const toBigIntNanoSeconds = (date: Date): bigint =>\n  BigInt(date.getTime()) * NANOSECONDS_PER_MILLISECOND;\n", "/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport const debounce = (func: Function, timeout?: number) => {\n  let timer: NodeJS.Timer | undefined;\n\n  return (...args: unknown[]) => {\n    const next = () => func(...args);\n\n    if (timer) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore TypeScript global and window confusion even if we are using @types/node\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(\n      next,\n      timeout !== undefined && timeout > 0 ? timeout : 300,\n    );\n  };\n};\n", "import { assertNonNullish } from \"./asserts.utils\";\nimport { nonNullish } from \"./nullish.utils\";\n\n/**\n * Converts a value into a Candid-style variant representation of an optional value.\n *\n * @template T The type of the value.\n * @param {T | null | undefined} value - The value to convert into a Candid-style variant.\n * @returns {[] | [T]} A Candid-style variant representation: an empty array for `null` and `undefined` or an array with the value.\n */\nexport const toNullable = <T>(value?: T | null): [] | [T] => {\n  return nonNullish(value) ? [value] : [];\n};\n\n/**\n * Extracts the value from a Candid-style variant representation of an optional value.\n *\n * @template T The type of the value.\n * @param {[] | [T]} value - A Candid-style variant representing an optional value.\n * @returns {T | undefined} The extracted value, or `undefined` if the array is empty.\n */\nexport const fromNullable = <T>(value: [] | [T]): T | undefined => {\n  return value?.[0];\n};\n\n/**\n * Extracts the value from a Candid-style variant representation of an optional value,\n * ensuring the value is defined. Throws an error if the array is empty or the value is nullish.\n *\n * @template T The type of the value.\n * @param {[] | [T]} value - A Candid-style variant representing an optional value.\n * @returns {T} The extracted value.\n * @throws {Error} If the array is empty or the value is nullish.\n */\nexport const fromDefinedNullable = <T>(value: [] | [T]): T => {\n  const result = fromNullable(value);\n\n  assertNonNullish(result);\n\n  return result;\n};\n\n/**\n * Extracts the value from a nullish Candid-style variant representation.\n *\n * @template T The type of the value.\n * @param {([] | [T]) | undefined} value - A Candid-style variant or `undefined`.\n * @returns {T | undefined} The extracted value, or `undefined` if the input is nullish or the array is empty.\n */\nexport const fromNullishNullable = <T>(\n  value: ([] | [T]) | undefined,\n): T | undefined => fromNullable(value ?? []);\n", "import { Principal } from \"@dfinity/principal\";\nimport { nonNullish } from \"./nullish.utils\";\n\nconst JSON_KEY_BIGINT = \"__bigint__\";\nconst JSON_KEY_PRINCIPAL = \"__principal__\";\nconst JSON_KEY_UINT8ARRAY = \"__uint8array__\";\n\n/**\n * A custom replacer for `JSON.stringify` that converts specific types not natively supported\n * by the API into JSON-compatible formats.\n *\n * Supported conversions:\n * - `BigInt` \u2192 `{ \"__bigint__\": string }`\n * - `Principal` \u2192 `{ \"__principal__\": string }`\n * - `Uint8Array` \u2192 `{ \"__uint8array__\": number[] }`\n *\n * @param {string} _key - Ignored. Only provided for API compatibility.\n * @param {unknown} value - The value to transform before stringification.\n * @returns {unknown} The transformed value if it matches a known type, otherwise the original value.\n */\nexport const jsonReplacer = (_key: string, value: unknown): unknown => {\n  if (typeof value === \"bigint\") {\n    return { [JSON_KEY_BIGINT]: `${value}` };\n  }\n\n  if (nonNullish(value) && value instanceof Principal) {\n    return { [JSON_KEY_PRINCIPAL]: value.toText() };\n  }\n\n  if (nonNullish(value) && value instanceof Uint8Array) {\n    return { [JSON_KEY_UINT8ARRAY]: Array.from(value) };\n  }\n\n  return value;\n};\n\n/**\n * A custom reviver for `JSON.parse` that reconstructs specific types from their JSON-encoded representations.\n *\n * This reverses the transformations applied by `jsonReplacer`, restoring the original types.\n *\n * Supported conversions:\n * - `{ \"__bigint__\": string }` \u2192 `BigInt`\n * - `{ \"__principal__\": string }` \u2192 `Principal`\n * - `{ \"__uint8array__\": number[] }` \u2192 `Uint8Array`\n *\n * @param {string} _key - Ignored but provided for API compatibility.\n * @param {unknown} value - The parsed value to transform.\n * @returns {unknown} The reconstructed value if it matches a known type, otherwise the original value.\n */\nexport const jsonReviver = (_key: string, value: unknown): unknown => {\n  const mapValue = <T>(key: string): T => (value as Record<string, T>)[key];\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_BIGINT in value\n  ) {\n    return BigInt(mapValue(JSON_KEY_BIGINT));\n  }\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_PRINCIPAL in value\n  ) {\n    return Principal.fromText(mapValue(JSON_KEY_PRINCIPAL));\n  }\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_UINT8ARRAY in value\n  ) {\n    return Uint8Array.from(mapValue(JSON_KEY_UINT8ARRAY));\n  }\n\n  return value;\n};\n", "import type { Principal } from \"@dfinity/principal\";\n\n/**\n * Convert a principal to a Uint8Array 32 length.\n * e.g. Useful to convert a canister ID when topping up cycles with the Cmc canister\n * @param principal The principal that needs to be converted to Subaccount\n */\nexport const principalToSubAccount = (principal: Principal): Uint8Array => {\n  const bytes: Uint8Array = principal.toUint8Array();\n  const subAccount: Uint8Array = new Uint8Array(32);\n  subAccount[0] = bytes.length;\n  subAccount.set(bytes, 1);\n  return subAccount;\n};\n", "const AMOUNT_VERSION_PARTS = 3;\nconst addZeros = (nums: number[], amountZeros: number): number[] =>\n  amountZeros > nums.length\n    ? [...nums, ...[...Array(amountZeros - nums.length).keys()].map(() => 0)]\n    : nums;\n\nconst convertToNumber = (versionStringPart: string): number => {\n  if (!Number.isNaN(Number(versionStringPart))) {\n    return Number(versionStringPart);\n  }\n  const strippedVersion = versionStringPart.split(\"\").reduce((acc, char) => {\n    if (Number.isNaN(Number(char))) {\n      return acc;\n    }\n    return acc + char;\n  }, \"\");\n  return Number(strippedVersion);\n};\n/**\n * Returns true if the current version is smaller than the minVersion, false if equal or bigger.\n * Tags after patch version are ignored, e.g. 1.0.0-beta.1 is considered equal to 1.0.0.\n *\n * @param {Object} params\n * @param {string} params.minVersion Ex: \"1.0.0\"\n * @param {string} params.currentVersion Ex: \"2.0.0\"\n * @returns boolean\n */\nexport const smallerVersion = ({\n  minVersion,\n  currentVersion,\n}: {\n  minVersion: string;\n  currentVersion: string;\n}): boolean => {\n  const minVersionStandarized = addZeros(\n    minVersion.split(\".\").map(convertToNumber),\n    AMOUNT_VERSION_PARTS,\n  ).join(\".\");\n  const currentVersionStandarized = addZeros(\n    currentVersion.split(\".\").map(convertToNumber),\n    AMOUNT_VERSION_PARTS,\n  ).join(\".\");\n  // Versions need to have the same number of parts to be comparable\n  // Source: https://stackoverflow.com/a/65687141\n  return (\n    currentVersionStandarized.localeCompare(minVersionStandarized, undefined, {\n      numeric: true,\n      sensitivity: \"base\",\n    }) < 0\n  );\n};\n", "import type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\n\nexport class AccountIdentifier {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromHex(hex: string): AccountIdentifier {\n    return new AccountIdentifier(Uint8Array.from(Buffer.from(hex, \"hex\")));\n  }\n\n  public static fromPrincipal({\n    principal,\n    subAccount = SubAccount.fromID(0),\n  }: {\n    principal: Principal;\n    subAccount?: SubAccount;\n  }): AccountIdentifier {\n    // Hash (sha224) the principal, the subAccount and some padding\n    const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n    const shaObj = sha224.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        ...padding,\n        ...principal.toUint8Array(),\n        ...subAccount.toUint8Array(),\n      ]),\n    );\n    const hash = shaObj.digest();\n\n    // Prepend the checksum of the hash and convert to a hex string\n    const checksum = bigEndianCrc32(hash);\n    const bytes = new Uint8Array([...checksum, ...hash]);\n    return new AccountIdentifier(bytes);\n  }\n\n  public toHex(): string {\n    return uint8ArrayToHexString(this.bytes);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n\n  public toNumbers(): number[] {\n    return Array.from(this.bytes);\n  }\n\n  public toAccountIdentifierHash(): { hash: Uint8Array } {\n    return {\n      hash: this.toUint8Array(),\n    };\n  }\n}\n\nexport class SubAccount {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromBytes(bytes: Uint8Array): SubAccount | Error {\n    if (bytes.length != 32) {\n      return Error(\"Subaccount length must be 32-bytes\");\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromPrincipal(principal: Principal): SubAccount {\n    const bytes = new Uint8Array(32).fill(0);\n\n    const principalBytes = principal.toUint8Array();\n    bytes[0] = principalBytes.length;\n\n    for (let i = 0; i < principalBytes.length; i++) {\n      bytes[1 + i] = principalBytes[i];\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromID(id: number): SubAccount {\n    if (id < 0) throw new Error(\"Number cannot be negative\");\n\n    if (id > Number.MAX_SAFE_INTEGER) {\n      throw new Error(\"Number is too large to fit in 32 bytes.\");\n    }\n\n    const view = new DataView(new ArrayBuffer(32));\n\n    // Fix for IOS < 14.8 setBigUint64 absence\n    if (typeof view.setBigUint64 === \"function\") {\n      view.setBigUint64(24, BigInt(id));\n    } else {\n      const TWO_TO_THE_32 = BigInt(1) << BigInt(32);\n      view.setUint32(24, Number(BigInt(id) >> BigInt(32)));\n      view.setUint32(28, Number(BigInt(id) % TWO_TO_THE_32));\n    }\n\n    const uint8Arary = new Uint8Array(view.buffer);\n    return new SubAccount(uint8Arary);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import { Principal } from \"@dfinity/principal\";\n\nexport const MAINNET_LEDGER_CANISTER_ID = Principal.fromText(\n  \"ryjl3-tyaaa-aaaaa-aaaba-cai\",\n);\n\nexport const MAINNET_INDEX_CANISTER_ID = Principal.fromText(\n  \"qhbym-qaaaa-aaaaa-aaafq-cai\",\n);\n", "import { AccountIdentifier } from \"../account_identifier\";\nimport type { AccountIdentifierHex } from \"../types/common\";\nimport type { AccountIdentifierParam } from \"../types/ledger.params\";\n\nexport const paramToAccountIdentifier = (\n  param: AccountIdentifierParam,\n): AccountIdentifier =>\n  param instanceof AccountIdentifier ? param : AccountIdentifier.fromHex(param);\n\nexport const paramToAccountIdentifierHex = (\n  param: AccountIdentifierParam,\n): AccountIdentifierHex =>\n  param instanceof AccountIdentifier ? param.toHex() : param;\n", "import type { Principal } from \"@dfinity/principal\";\nimport { Canister, createServices, type QueryParams } from \"@dfinity/utils\";\nimport type {\n  Icrc1BlockIndex,\n  _SERVICE as LedgerService,\n  Value,\n  icrc21_consent_info,\n} from \"../candid/ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory } from \"../candid/ledger.idl\";\nimport {\n  toIcrc1TransferRawRequest,\n  toIcrc21ConsentMessageRawRequest,\n  toIcrc2ApproveRawRequest,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport {\n  mapIcrc1TransferError,\n  mapIcrc21ConsentMessageError,\n  mapIcrc2ApproveError,\n  mapTransferError,\n} from \"./errors/ledger.errors\";\nimport type { BlockHeight } from \"./types/common\";\nimport type { LedgerCanisterOptions } from \"./types/ledger.options\";\nimport type { AccountBalanceParams } from \"./types/ledger.params\";\nimport type {\n  Icrc1TransferRequest,\n  Icrc21ConsentMessageRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"./types/ledger_converters\";\nimport { paramToAccountIdentifier } from \"./utils/params.utils\";\n\nexport class LedgerCanister extends Canister<LedgerService> {\n  public static create(options: LedgerCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const { service, certifiedService } = createServices<LedgerService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new LedgerCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param {AccountBalanceParams} params The parameters to get the balance of an account.\n   * @param {AccountIdentifierParam} params.accountIdentifier The account identifier provided either as hex string or as an AccountIdentifier.\n   * @param {boolean} params.certified query or update call.\n   * @returns {Promise<bigint>} The balance of the given account.\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier: accountIdentifierParam,\n    certified = true,\n  }: AccountBalanceParams): Promise<bigint> => {\n    const accountIdentifier = paramToAccountIdentifier(accountIdentifierParam);\n\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toUint8Array(),\n    });\n    return tokens.e8s;\n  };\n\n  /**\n   * Fetches the ledger metadata.\n   *\n   * @param {QueryParams} params - The parameters used to fetch the metadata, notably query or certified call.\n   * @returns {Promise<Array<[string, Value]>>} The metadata of the ICP ledger. A promise that resolves to an array of metadata entries, where each entry is a tuple consisting of a string and a value.\n   */\n  metadata = (params: QueryParams): Promise<Array<[string, Value]>> => {\n    const { icrc1_metadata } = this.caller(params);\n    return icrc1_metadata();\n  };\n\n  /**\n   * Returns the transaction fee of the ICP ledger canister.\n   *\n   * @param {QueryParams} [params={certified: false}] - Optional query parameters for the request, defaulting to `{ certified: false }` for backwards compatibility reason.\n   * @returns {Promise<bigint>} A promise that resolves to the transaction fee as a bigint.\n   */\n  public transactionFee = async (\n    params: QueryParams = { certified: false },\n  ): Promise<bigint> => {\n    const { transfer_fee } = this.caller(params);\n\n    const {\n      transfer_fee: { e8s },\n    } = await transfer_fee({});\n\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  // WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n  // relationship between the memo and the icrc1Memo of a transaction. The\n  // ICRC-1 interface simply cannot set the memo field and the non-ICRC-1\n  // interface cannot set the icrc1Memo field, even though the icrc1Memo field\n  // is called just \"memo\" in canister method params.\n  /**\n   * Transfer ICP from the caller to the destination `Account`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public icrc1Transfer = async (\n    request: Icrc1TransferRequest,\n  ): Promise<BlockHeight> => {\n    const rawRequest = toIcrc1TransferRawRequest(request);\n    const response = await this.certifiedService.icrc1_transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapIcrc1TransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  /**\n   * This method entitles the `spender` to transfer token `amount` on behalf of the caller from account `{ owner = caller; subaccount = from_subaccount }`.\n   *\n   * Reference: https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md#icrc2_approve\n   *\n   * @param {Icrc2ApproveRequest} params - The parameters to approve.\n   * @throws {ApproveError} If the approval fails.\n   * @returns {Promise<Icrc1BlockIndex>} The block index of the approved transaction.\n   */\n  icrc2Approve = async (\n    params: Icrc2ApproveRequest,\n  ): Promise<Icrc1BlockIndex> => {\n    const { icrc2_approve } = this.caller({ certified: true });\n\n    const response = await icrc2_approve(toIcrc2ApproveRawRequest(params));\n\n    if (\"Err\" in response) {\n      throw mapIcrc2ApproveError(response.Err);\n    }\n\n    return response.Ok;\n  };\n\n  /**\n   * Fetches the consent message for a specified canister call, intended to provide a human-readable message that helps users make informed decisions.\n   *\n   * @link: https://github.com/dfinity/wg-identity-authentication/blob/main/topics/ICRC-21/icrc_21_consent_msg.md\n   *\n   * @param {Icrc21ConsentMessageRequest} params - The request parameters containing the method name, arguments, and consent preferences (e.g., language).\n   * @returns {Promise<icrc21_consent_info>} - A promise that resolves to the consent message response, which includes the consent message in the specified language and other related information.\n   *\n   * @throws {InsufficientPaymentError} - This error is reserved for future use, in case payment extensions are introduced. For example, if consent messages, which are currently free, begin to require payments.\n   * @throws {UnsupportedCanisterCallError} - If the specified canister call is not supported.\n   * @throws {ConsentMessageUnavailableError} - If there is no consent message available.\n   * @throws {GenericError} - For any other generic errors.\n   */\n  icrc21ConsentMessage = async (\n    params: Icrc21ConsentMessageRequest,\n  ): Promise<icrc21_consent_info> => {\n    const { icrc21_canister_call_consent_message } = this.caller({\n      certified: true,\n    });\n\n    const response = await icrc21_canister_call_consent_message(\n      toIcrc21ConsentMessageRawRequest(params),\n    );\n\n    if (\"Err\" in response) {\n      throw mapIcrc21ConsentMessageError(response.Err);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'spender_subaccount' : IDL.Opt(SubAccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Icrc1Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Icrc1Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        [],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgsDfx], [Tokens], []),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_metadata' : IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, Value))], []),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], []),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'query_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        [],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger-icp/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const icrc21_consent_message_metadata = IDL.Record({\n    'utc_offset_minutes' : IDL.Opt(IDL.Int16),\n    'language' : IDL.Text,\n  });\n  const icrc21_consent_message_spec = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'device_spec' : IDL.Opt(\n      IDL.Variant({\n        'GenericDisplay' : IDL.Null,\n        'LineDisplay' : IDL.Record({\n          'characters_per_line' : IDL.Nat16,\n          'lines_per_page' : IDL.Nat16,\n        }),\n      })\n    ),\n  });\n  const icrc21_consent_message_request = IDL.Record({\n    'arg' : IDL.Vec(IDL.Nat8),\n    'method' : IDL.Text,\n    'user_preferences' : icrc21_consent_message_spec,\n  });\n  const icrc21_consent_message = IDL.Variant({\n    'LineDisplayMessage' : IDL.Record({\n      'pages' : IDL.Vec(IDL.Record({ 'lines' : IDL.Vec(IDL.Text) })),\n    }),\n    'GenericDisplayMessage' : IDL.Text,\n  });\n  const icrc21_consent_info = IDL.Record({\n    'metadata' : icrc21_consent_message_metadata,\n    'consent_message' : icrc21_consent_message,\n  });\n  const icrc21_error_info = IDL.Record({ 'description' : IDL.Text });\n  const icrc21_error = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'description' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'InsufficientPayment' : icrc21_error_info,\n    'UnsupportedCanisterCall' : icrc21_error_info,\n    'ConsentMessageUnavailable' : icrc21_error_info,\n  });\n  const icrc21_consent_message_response = IDL.Variant({\n    'Ok' : icrc21_consent_info,\n    'Err' : icrc21_error,\n  });\n  const AllowanceArgs = IDL.Record({\n    'account' : Account,\n    'spender' : Account,\n  });\n  const Allowance = IDL.Record({\n    'allowance' : Icrc1Tokens,\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n    'expected_allowance' : IDL.Opt(Icrc1Tokens),\n    'expires_at' : IDL.Opt(Icrc1Timestamp),\n    'spender' : Account,\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'AllowanceChanged' : IDL.Record({ 'current_allowance' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'Expired' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const ApproveResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : ApproveError,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'spender_subaccount' : IDL.Opt(SubAccount),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : Icrc1Tokens }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : Icrc1Timestamp }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const TransferFromResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : TransferFromError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'allowance' : Tokens,\n      'expected_allowance' : IDL.Opt(Tokens),\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(AccountIdentifier),\n    }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const ArchivedBlocksRange = IDL.Record({\n    'callback' : QueryArchiveFn,\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(ArchivedBlocksRange),\n  });\n  const ArchivedEncodedBlocksRange = IDL.Record({\n    'callback' : IDL.Func(\n        [GetBlocksArgs],\n        [\n          IDL.Variant({\n            'Ok' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n            'Err' : QueryArchiveError,\n          }),\n        ],\n        ['query'],\n      ),\n    'start' : IDL.Nat64,\n    'length' : IDL.Nat64,\n  });\n  const QueryEncodedBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(IDL.Vec(IDL.Nat8)),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(ArchivedEncodedBlocksRange),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'account_balance_dfx' : IDL.Func(\n        [AccountBalanceArgsDfx],\n        [Tokens],\n        ['query'],\n      ),\n    'account_identifier' : IDL.Func([Account], [AccountIdentifier], ['query']),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'icrc10_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, Value))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'icrc21_canister_call_consent_message' : IDL.Func(\n        [icrc21_consent_message_request],\n        [icrc21_consent_message_response],\n        [],\n      ),\n    'icrc2_allowance' : IDL.Func([AllowanceArgs], [Allowance], ['query']),\n    'icrc2_approve' : IDL.Func([ApproveArgs], [ApproveResult], []),\n    'icrc2_transfer_from' : IDL.Func(\n        [TransferFromArgs],\n        [TransferFromResult],\n        [],\n      ),\n    'is_ledger_ready' : IDL.Func([], [IDL.Bool], ['query']),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'query_encoded_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryEncodedBlocksResponse],\n        ['query'],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const FeatureFlags = IDL.Record({ 'icrc2' : IDL.Bool });\n  const UpgradeArgs = IDL.Record({\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'max_transactions_per_response' : IDL.Opt(IDL.Nat64),\n    'trigger_threshold' : IDL.Nat64,\n    'more_controller_ids' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n    'feature_flags' : IDL.Opt(FeatureFlags),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "import {\n  arrayOfNumberToUint8Array,\n  isNullish,\n  toNullable,\n} from \"@dfinity/utils\";\nimport type {\n  TransferArg as Icrc1TransferRawRequest,\n  icrc21_consent_message_request as Icrc21ConsentMessageRawRequest,\n  ApproveArgs as Icrc2ApproveRawRequest,\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledger\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport type {\n  Icrc1TransferRequest,\n  Icrc21ConsentMessageRequest,\n  Icrc2ApproveRequest,\n  TransferRequest,\n} from \"../../types/ledger_converters\";\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n  createdAt,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toUint8Array(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time:\n    createdAt !== undefined ? [{ timestamp_nanos: createdAt }] : [],\n  from_subaccount:\n    fromSubAccount === undefined\n      ? []\n      : [arrayOfNumberToUint8Array(fromSubAccount)],\n});\n\n// WARNING: When using the ICRC-1 interface of the ICP ledger, there is no\n// relationship between the memo and the icrc1Memo of a transaction. The ICRC-1\n// interface simply cannot set the memo field and the non-ICRC-1 interface\n// cannot set the icrc1Memo field, even though the icrc1Memo field is called\n// just \"memo\" in canister method params.\nexport const toIcrc1TransferRawRequest = ({\n  fromSubAccount,\n  to,\n  amount,\n  fee,\n  icrc1Memo,\n  createdAt,\n}: Icrc1TransferRequest): Icrc1TransferRawRequest => ({\n  to,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  amount,\n  memo: toNullable(icrc1Memo),\n  created_at_time: toNullable(createdAt),\n  from_subaccount: toNullable(fromSubAccount),\n});\n\nexport const toIcrc2ApproveRawRequest = ({\n  fee,\n  createdAt,\n  icrc1Memo,\n  fromSubAccount,\n  expected_allowance,\n  expires_at,\n  amount,\n  ...rest\n}: Icrc2ApproveRequest): Icrc2ApproveRawRequest => ({\n  ...rest,\n  fee: toNullable(fee ?? TRANSACTION_FEE),\n  memo: toNullable(icrc1Memo),\n  from_subaccount: toNullable(fromSubAccount),\n  created_at_time: toNullable(createdAt),\n  amount,\n  expected_allowance: toNullable(expected_allowance),\n  expires_at: toNullable(expires_at),\n});\n\nexport const toIcrc21ConsentMessageRawRequest = ({\n  userPreferences: {\n    metadata: { utcOffsetMinutes, language },\n    deriveSpec,\n  },\n  ...rest\n}: Icrc21ConsentMessageRequest): Icrc21ConsentMessageRawRequest => ({\n  ...rest,\n  user_preferences: {\n    metadata: {\n      language,\n      utc_offset_minutes: toNullable(utcOffsetMinutes),\n    },\n    device_spec: isNullish(deriveSpec)\n      ? toNullable()\n      : toNullable(\n          \"GenericDisplay\" in deriveSpec\n            ? { GenericDisplay: null }\n            : {\n                LineDisplay: {\n                  characters_per_line: deriveSpec.LineDisplay.charactersPerLine,\n                  lines_per_page: deriveSpec.LineDisplay.linesPerPage,\n                },\n              },\n        ),\n  },\n});\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "import type {\n  Icrc1BlockIndex,\n  Icrc1Tokens,\n  icrc21_error as Icrc21RawError,\n  ApproveError as RawApproveError,\n  Icrc1TransferError as RawIcrc1TransferError,\n  TransferError as RawTransferError,\n} from \"../../candid/ledger\";\nimport type { BlockHeight } from \"../types/common\";\n\nexport class IcrcError extends Error {}\n\nexport class TransferError extends IcrcError {}\nexport class ApproveError extends IcrcError {}\nexport class ConsentMessageError extends IcrcError {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InvalidAccountIDError extends Error {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: bigint) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs?: number | undefined) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends IcrcError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport class GenericError extends ApproveError {\n  constructor(\n    public readonly message: string,\n    public readonly error_code: bigint,\n  ) {\n    super();\n  }\n}\n\nexport class TemporarilyUnavailableError extends ApproveError {}\n\nexport class DuplicateError extends ApproveError {\n  constructor(public readonly duplicateOf: Icrc1BlockIndex) {\n    super();\n  }\n}\n\nexport class AllowanceChangedError extends ApproveError {\n  constructor(public readonly currentAllowance: Icrc1Tokens) {\n    super();\n  }\n}\n\nexport class CreatedInFutureError extends ApproveError {}\nexport class TooOldError extends ApproveError {}\n\nexport class ExpiredError extends ApproveError {\n  constructor(public readonly ledgerTime: bigint) {\n    super();\n  }\n}\n\nexport class InsufficientPaymentError extends ConsentMessageError {}\nexport class UnsupportedCanisterCallError extends ConsentMessageError {}\nexport class ConsentMessageUnavailableError extends ConsentMessageError {}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError,\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance.e8s,\n    );\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos),\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc1TransferError = (\n  rawTransferError: RawIcrc1TransferError,\n): TransferError => {\n  if (\"Duplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.Duplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance,\n    );\n  }\n  if (\"CreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TooOld\" in rawTransferError) {\n    return new TxTooOldError();\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapIcrc2ApproveError = (\n  rawApproveError: RawApproveError,\n): ApproveError => {\n  /**\n   * export type ApproveError =\n   *   | { InsufficientFunds: { balance: Icrc1Tokens } };\n   */\n\n  if (\"GenericError\" in rawApproveError) {\n    return new GenericError(\n      rawApproveError.GenericError.message,\n      rawApproveError.GenericError.error_code,\n    );\n  }\n\n  if (\"TemporarilyUnavailable\" in rawApproveError) {\n    return new TemporarilyUnavailableError();\n  }\n\n  if (\"Duplicate\" in rawApproveError) {\n    return new DuplicateError(rawApproveError.Duplicate.duplicate_of);\n  }\n\n  if (\"BadFee\" in rawApproveError) {\n    return new BadFeeError(rawApproveError.BadFee.expected_fee);\n  }\n\n  if (\"AllowanceChanged\" in rawApproveError) {\n    return new AllowanceChangedError(\n      rawApproveError.AllowanceChanged.current_allowance,\n    );\n  }\n\n  if (\"CreatedInFuture\" in rawApproveError) {\n    return new CreatedInFutureError();\n  }\n\n  if (\"TooOld\" in rawApproveError) {\n    return new TooOldError();\n  }\n\n  if (\"Expired\" in rawApproveError) {\n    return new ExpiredError(rawApproveError.Expired.ledger_time);\n  }\n\n  if (\"InsufficientFunds\" in rawApproveError) {\n    return new InsufficientFundsError(\n      rawApproveError.InsufficientFunds.balance,\n    );\n  }\n\n  // Edge case\n  return new ApproveError(\n    `Unknown error type ${JSON.stringify(rawApproveError)}`,\n  );\n};\n\nexport const mapIcrc21ConsentMessageError = (\n  rawError: Icrc21RawError,\n): ConsentMessageError => {\n  if (\"GenericError\" in rawError) {\n    return new GenericError(\n      rawError.GenericError.description,\n      rawError.GenericError.error_code,\n    );\n  }\n\n  if (\"InsufficientPayment\" in rawError) {\n    return new InsufficientPaymentError(\n      rawError.InsufficientPayment.description,\n    );\n  }\n\n  if (\"UnsupportedCanisterCall\" in rawError) {\n    return new UnsupportedCanisterCallError(\n      rawError.UnsupportedCanisterCall.description,\n    );\n  }\n  if (\"ConsentMessageUnavailable\" in rawError) {\n    return new ConsentMessageUnavailableError(\n      rawError.ConsentMessageUnavailable.description,\n    );\n  }\n\n  // Edge case\n  return new ConsentMessageError(\n    `Unknown error type ${JSON.stringify(rawError)}`,\n  );\n};\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n", "import type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\nimport { Buffer } from \"buffer\";\nimport type { AccountIdentifierHex } from \"../types/common\";\n\nexport const accountIdentifierToBytes = (\n  accountIdentifier: AccountIdentifierHex,\n): Uint8Array =>\n  Uint8Array.from(Buffer.from(accountIdentifier, \"hex\")).subarray(4);\n\nexport const accountIdentifierFromBytes = (\n  accountIdentifier: Uint8Array,\n): AccountIdentifierHex => Buffer.from(accountIdentifier).toString(\"hex\");\n\nexport const principalToAccountIdentifier = (\n  principal: Principal,\n  subAccount?: Uint8Array,\n): string => {\n  // Hash (sha224) the principal, the subAccount and some padding\n  const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n  const shaObj = sha224.create();\n  shaObj.update(\n    arrayOfNumberToUint8Array([\n      ...padding,\n      ...principal.toUint8Array(),\n      ...(subAccount ?? Array(32).fill(0)),\n    ]),\n  );\n  const hash = shaObj.digest();\n\n  // Prepend the checksum of the hash and convert to a hex string\n  const checksum = bigEndianCrc32(hash);\n  const bytes = new Uint8Array([...checksum, ...hash]);\n  return uint8ArrayToHexString(bytes);\n};\n", "import { bigEndianCrc32 } from \"@dfinity/utils\";\nimport { InvalidAccountIDError } from \"../errors/ledger.errors\";\n\n/**\n * Checks account id check sum\n *\n * @throws InvalidAccountIDError\n */\nexport const checkAccountId = (accountId: string): void => {\n  // Verify the checksum of the given address.\n  if (accountId.length != 64) {\n    throw new InvalidAccountIDError(\n      `Invalid account identifier ${accountId}. The account identifier must be 64 chars in length.`,\n    );\n  }\n\n  const toAccountBytes = Buffer.from(accountId, \"hex\");\n  const foundChecksum = toAccountBytes.slice(0, 4);\n  const expectedCheckum = Buffer.from(bigEndianCrc32(toAccountBytes.slice(4)));\n  if (!expectedCheckum.equals(foundChecksum)) {\n    throw new InvalidAccountIDError(\n      `Account identifier ${accountId} has an invalid checksum. Are you sure the account identifier is correct?\\n\\nExpected checksum: ${expectedCheckum.toString(\n        \"hex\",\n      )}\\nFound checksum: ${foundChecksum.toString(\"hex\")}`,\n    );\n  }\n};\n"],
  "mappings": "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",
  "names": ["value", "x", "__classPrivateFieldSet", "__classPrivateFieldGet", "value", "_a", "__classPrivateFieldSet", "__classPrivateFieldGet", "PubKeyCoseAlgo", "m", "_", "__classPrivateFieldSet", "__classPrivateFieldGet", "_a", "response", "P", "BigNumber", "v", "b", "c", "e", "x", "k", "j", "d", "r", "y", "m", "compare", "xe", "ye", "format", "d2", "z", "__classPrivateFieldSet", "__classPrivateFieldGet", "h", "__classPrivateFieldGet", "__classPrivateFieldSet", "_SignerAgent_executeQueue", "_SignerAgent_executeBatch", "value", "value", "value", "FromStringToTokenError", "E8S_PER_TOKEN", "Canister", "id", "service", "certifiedService", "certified", "isNullish", "argument", "nonNullish", "defaultAgent", "HttpAgent", "AnonymousIdentity", "createServices", "canisterId", "serviceOverride", "certifiedServiceOverride", "agentOption", "callTransform", "queryTransform", "idlFactory", "certifiedIdlFactory", "agent", "defaultAgent", "service", "Actor", "certifiedService", "arrayOfNumberToUint8Array", "numbers", "asciiStringToByteArray", "text", "c", "uint8ArrayToHexString", "bytes", "str", "byte", "ALPHABET", "LOOKUP_TABLE", "i", "lookUpTable", "crc32", "bytes", "crc", "i", "t", "bigEndianCrc32", "checksumArrayBuf", "toNullable", "value", "nonNullish", "isBytes", "a", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "min", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "tmp", "setBigUint64", "view", "byteOffset", "value", "_32n", "_u32_max", "wh", "wl", "h", "l", "Chi", "c", "Maj", "HashMD", "blockLen", "outputLen", "padOffset", "buffer", "len", "pos", "take", "dataView", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "A", "B", "C", "D", "E", "F", "G", "H", "offset", "W15", "W2", "s0", "s1", "sigma1", "T1", "T2", "SHA224", "sha224", "AccountIdentifier", "_AccountIdentifier", "hex", "principal", "subAccount", "SubAccount", "padding", "asciiStringToByteArray", "shaObj", "arrayOfNumberToUint8Array", "hash", "checksum", "bigEndianCrc32", "uint8ArrayToHexString", "_SubAccount", "principalBytes", "id", "TWO_TO_THE_32", "uint8Arary", "MAINNET_LEDGER_CANISTER_ID", "Principal", "MAINNET_INDEX_CANISTER_ID", "paramToAccountIdentifier", "param", "AccountIdentifier", "idlFactory", "IDL", "SubAccount", "Account", "FeatureFlags", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "AccountIdentifier", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "icrc21_consent_message_metadata", "icrc21_consent_message_spec", "icrc21_consent_message_request", "icrc21_consent_message", "icrc21_consent_info", "icrc21_error_info", "icrc21_error", "icrc21_consent_message_response", "AllowanceArgs", "Allowance", "ApproveArgs", "ApproveError", "ApproveResult", "TransferFromArgs", "TransferFromError", "TransferFromResult", "BlockIndex", "GetBlocksArgs", "Memo", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "ArchivedBlocksRange", "QueryBlocksResponse", "ArchivedEncodedBlocksRange", "QueryEncodedBlocksResponse", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "CREATE_CANISTER_MEMO", "TOP_UP_CANISTER_MEMO", "TRANSACTION_FEE", "E8S_PER_TOKEN", "e8sToTokens", "e8s", "toTransferRawRequest", "to", "amount", "memo", "fee", "fromSubAccount", "createdAt", "arrayOfNumberToUint8Array", "toIcrc1TransferRawRequest", "icrc1Memo", "toNullable", "toIcrc2ApproveRawRequest", "expected_allowance", "expires_at", "rest", "toIcrc21ConsentMessageRawRequest", "utcOffsetMinutes", "language", "deriveSpec", "isNullish", "IcrcError", "ConsentMessageError", "InsufficientFundsError", "TransferError", "balance", "TxTooOldError", "allowed_window_secs", "TxCreatedInFutureError", "TxDuplicateError", "duplicateOf", "BadFeeError", "IcrcError", "expectedFee", "GenericError", "ApproveError", "message", "error_code", "TemporarilyUnavailableError", "DuplicateError", "AllowanceChangedError", "currentAllowance", "CreatedInFutureError", "TooOldError", "ExpiredError", "ledgerTime", "InsufficientPaymentError", "ConsentMessageError", "UnsupportedCanisterCallError", "ConsentMessageUnavailableError", "mapTransferError", "rawTransferError", "mapIcrc1TransferError", "mapIcrc2ApproveError", "rawApproveError", "mapIcrc21ConsentMessageError", "rawError", "LedgerCanister", "_LedgerCanister", "Canister", "accountIdentifierParam", "certified", "accountIdentifier", "paramToAccountIdentifier", "params", "icrc1_metadata", "transfer_fee", "e8s", "request", "rawRequest", "toTransferRawRequest", "response", "toIcrc1TransferRawRequest", "icrc2_approve", "toIcrc2ApproveRawRequest", "icrc21_canister_call_consent_message", "toIcrc21ConsentMessageRawRequest", "options", "canisterId", "MAINNET_LEDGER_CANISTER_ID", "service", "certifiedService", "createServices", "idlFactory", "require_base64_js", "__commonJSMin", "exports", "byteLength", "toByteArray", "fromByteArray", "lookup", "revLookup", "Arr", "code", "i", "len", "getLens", "b64", "validLen", "placeHoldersLen", "lens", "_byteLength", "tmp", "arr", "curByte", "tripletToBase64", "num", "encodeChunk", "uint8", "start", "end", "output", "extraBytes", "parts", "maxChunkLength", "len2", "require_ieee754", "buffer", "offset", "isLE", "mLen", "nBytes", "e", "m", "eLen", "eMax", "eBias", "nBits", "d", "s", "value", "c", "rt", "require_buffer", "base64", "J", "ieee754", "customInspectSymbol", "Buffer", "SlowBuffer", "K_MAX_LENGTH", "typedArraySupport", "proto", "createBuffer", "length", "buf", "arg", "encodingOrOffset", "allocUnsafe", "from", "fromString", "fromArrayView", "isInstance", "fromArrayBuffer", "valueOf", "b", "fromObject", "assertSize", "size", "alloc", "fill", "encoding", "checked", "string", "actual", "fromArrayLike", "array", "arrayView", "copy", "byteOffset", "obj", "numberIsNaN", "a", "x", "y", "list", "pos", "mustMatch", "loweredCase", "utf8ToBytes", "base64ToBytes", "slowToString", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "n", "str", "max", "target", "thisStart", "thisEnd", "thisCopy", "targetCopy", "bidirectionalIndexOf", "val", "dir", "arrayIndexOf", "indexSize", "arrLength", "valLength", "read", "foundIndex", "found", "j", "hexWrite", "remaining", "strLen", "parsed", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "base64Write", "ucs2Write", "utf16leToBytes", "res", "firstByte", "codePoint", "bytesPerSequence", "secondByte", "thirdByte", "fourthByte", "tempCodePoint", "decodeCodePointsArray", "MAX_ARGUMENTS_LENGTH", "codePoints", "ret", "out", "hexSliceLookupTable", "bytes", "newBuf", "checkOffset", "ext", "noAssert", "mul", "defineBigIntMethod", "validateNumber", "first", "last", "boundsError", "lo", "hi", "checkInt", "min", "maxBytes", "wrtBigUInt64LE", "checkIntBI", "wrtBigUInt64BE", "limit", "sub", "checkIEEE754", "writeFloat", "littleEndian", "writeDouble", "targetStart", "errors", "E", "sym", "getMessage", "Base", "name", "range", "input", "msg", "received", "addNumericalSeparator", "checkBounds", "type", "INVALID_BASE64_RE", "base64clean", "units", "leadSurrogate", "byteArray", "src", "dst", "alphabet", "table", "i16", "fn", "BufferBigIntNotDefined", "import_buffer"]
}
